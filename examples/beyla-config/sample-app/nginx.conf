events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format personalizado para observabilidade
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Configuração de gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Headers de segurança
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Metrics endpoint (simulado)
        location /metrics {
            access_log off;
            return 200 "# HELP nginx_requests_total Total number of requests\n# TYPE nginx_requests_total counter\nnginx_requests_total 42\n";
            add_header Content-Type text/plain;
        }

        # Página principal
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # API endpoints simulados
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Simulação de diferentes endpoints
            location = /api/users {
                return 200 '{"users": [{"id": 1, "name": "João"}, {"id": 2, "name": "Maria"}]}';
                add_header Content-Type application/json;
            }

            location = /api/products {
                return 200 '{"products": [{"id": 1, "name": "Produto A"}, {"id": 2, "name": "Produto B"}]}';
                add_header Content-Type application/json;
            }

            # Endpoint que simula erro 404
            location = /api/not-found {
                return 404 '{"error": "Resource not found"}';
                add_header Content-Type application/json;
            }

            # Endpoint que simula erro 500
            location = /api/error {
                return 500 '{"error": "Internal server error"}';
                add_header Content-Type application/json;
            }

            # Endpoint que simula resposta lenta
            location = /api/slow {
                # Simula delay usando sleep (não recomendado em produção)
                access_log off;
                return 200 '{"message": "This is a slow endpoint", "delay": "3s"}';
                add_header Content-Type application/json;
                # Nota: Para simular delay real, seria necessário um backend
            }

            # Endpoint de login com rate limiting mais restritivo
            location = /api/login {
                limit_req zone=login burst=5 nodelay;
                return 200 '{"token": "fake-jwt-token", "expires_in": 3600}';
                add_header Content-Type application/json;
            }

            # Endpoint que retorna dados grandes
            location = /api/large-data {
                return 200 '{"data": "' repeat(1000) 'This is a large response payload that will test how Beyla handles bigger payloads. ' '"}';
                add_header Content-Type application/json;
            }

            # Default para outras rotas da API
            return 404 '{"error": "API endpoint not found"}';
            add_header Content-Type application/json;
        }

        # Arquivos estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Bloquear acesso a arquivos sensíveis
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}