# Prometheus Configuration for Beyla POC

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: 'poc'
    cluster: 'beyla-demo'

# Alertmanager configuration (opcional)
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets:
#           - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 15s
    metrics_path: '/metrics'

  # Grafana Alloy
  - job_name: 'alloy'
    static_configs:
      - targets: ['alloy:12345']
    scrape_interval: 15s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'alloy'

  # Grafana Beyla (se métricas Prometheus estiverem habilitadas)
  - job_name: 'beyla'
    static_configs:
      - targets: ['beyla:9090']
    scrape_interval: 15s
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'beyla'

  # Sample application (se expor métricas)
  - job_name: 'sample-app'
    static_configs:
      - targets: ['sample-app:80']
    scrape_interval: 30s
    metrics_path: '/metrics'
    scrape_timeout: 10s
    # Ignorar se não houver endpoint de métricas
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'sample-app'

  # Grafana (métricas internas)
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 30s
    metrics_path: '/metrics'
    scrape_timeout: 10s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'grafana'

  # Docker containers discovery (opcional)
  # - job_name: 'docker-containers'
  #   docker_sd_configs:
  #     - host: unix:///var/run/docker.sock
  #       refresh_interval: 30s
  #   relabel_configs:
  #     - source_labels: [__meta_docker_container_label_prometheus_scrape]
  #       action: keep
  #       regex: true
  #     - source_labels: [__meta_docker_container_label_prometheus_port]
  #       action: replace
  #       regex: (.*)
  #       target_label: __address__
  #       replacement: ${1}
  #     - source_labels: [__meta_docker_container_label_prometheus_path]
  #       action: replace
  #       target_label: __metrics_path__
  #       regex: (.+)
  #     - source_labels: [__meta_docker_container_name]
  #       target_label: container_name
  #     - source_labels: [__meta_docker_container_label_prometheus_job]
  #       target_label: job

# Remote write configuration (para enviar dados para outros sistemas)
# remote_write:
#   - url: "http://cortex:9009/api/prom/push"
#     queue_config:
#       capacity: 10000
#       max_shards: 200
#       min_shards: 1
#       max_samples_per_send: 2000
#       batch_send_deadline: 5s
#       min_backoff: 30ms
#       max_backoff: 100ms

# Remote read configuration (para ler dados de outros sistemas)
# remote_read:
#   - url: "http://cortex:9009/api/prom/read"
#     read_recent: true