# Prometheus Configuration for Alloy POC
# This configuration works with Grafana Alloy as the primary collector

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'alloy-poc'
    environment: 'development'
    region: 'local'

# Rule files for alerting
rule_files:
  - "rules/*.yml"

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape configurations
scrape_configs:
  # Scrape Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'prometheus-server'

  # Scrape Grafana Alloy metrics
  - job_name: 'alloy'
    static_configs:
      - targets: ['alloy:12345']
    scrape_interval: 15s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'alloy-collector'
      - target_label: component
        replacement: 'alloy'

  # Scrape Alloy's Prometheus export endpoint
  - job_name: 'alloy-prometheus-export'
    static_configs:
      - targets: ['alloy:9464']
    scrape_interval: 10s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'alloy-prometheus-export'
      - target_label: collector
        replacement: 'alloy'

  # Scrape Node Exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'docker-host'

  # Scrape cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'docker-containers'

  # Scrape sample applications
  - job_name: 'sample-web-app'
    static_configs:
      - targets: ['sample-web-app:80']
    scrape_interval: 10s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'sample-web-app'
      - target_label: application
        replacement: 'nginx-sample'

  - job_name: 'sample-node-app'
    static_configs:
      - targets: ['sample-node-app:3000']
    scrape_interval: 10s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'sample-node-app'
      - target_label: application
        replacement: 'node-sample'

  # Scrape Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'grafana-server'

  # Scrape Loki metrics
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'loki-server'

  # Scrape Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    scrape_interval: 30s
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'jaeger-server'

  # Docker service discovery for dynamic targets
  - job_name: 'docker-services'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 30s
        filters:
          - name: label
            values: ["metrics.scrape=true"]
    relabel_configs:
      # Use container name as instance
      - source_labels: [__meta_docker_container_name]
        target_label: instance
      # Use service label as job if available
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: job
      # Use custom metrics port if specified
      - source_labels: [__meta_docker_container_label_metrics_port]
        target_label: __address__
        regex: '(.+)'
        replacement: '${1}:${__meta_docker_container_label_metrics_port}'
      # Use custom metrics path if specified
      - source_labels: [__meta_docker_container_label_metrics_path]
        target_label: __metrics_path__
        regex: '(.+)'
        replacement: '${1}'
      # Add container labels as metrics labels
      - source_labels: [__meta_docker_container_label_environment]
        target_label: environment
      - source_labels: [__meta_docker_container_label_version]
        target_label: version
      - source_labels: [__meta_docker_container_label_team]
        target_label: team

# Remote write configuration (for federation or long-term storage)
remote_write:
  - url: "http://localhost:9201/api/v1/write"
    name: "long-term-storage"
    queue_config:
      capacity: 10000
      max_shards: 200
      min_shards: 1
      max_samples_per_send: 2000
      batch_send_deadline: 5s
      min_backoff: 30ms
      max_backoff: 100ms
    write_relabel_configs:
      # Only send specific metrics to long-term storage
      - source_labels: [__name__]
        regex: '(up|alloy_.*|http_.*|node_.*|container_.*)'
        action: keep
      # Add additional labels for long-term storage
      - target_label: storage_tier
        replacement: 'long-term'

# Remote read configuration (for querying external Prometheus)
remote_read:
  - url: "http://localhost:9201/api/v1/read"
    name: "long-term-storage"
    read_recent: true
    required_matchers:
      storage_tier: "long-term"