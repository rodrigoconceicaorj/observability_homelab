"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultOTELInstrumentations = getDefaultOTELInstrumentations;
var instrumentation_fetch_1 = require("@opentelemetry/instrumentation-fetch");
var faroXhrInstrumentation_1 = require("./faroXhrInstrumentation");
var instrumentationUtils_1 = require("./instrumentationUtils");
function getDefaultOTELInstrumentations(options) {
    if (options === void 0) { options = {}; }
    var fetchInstrumentationOptions = options.fetchInstrumentationOptions, xhrInstrumentationOptions = options.xhrInstrumentationOptions, sharedOptions = __rest(options, ["fetchInstrumentationOptions", "xhrInstrumentationOptions"]);
    var fetchOpts = createFetchInstrumentationOptions(fetchInstrumentationOptions, sharedOptions);
    var xhrOpts = createXhrInstrumentationOptions(xhrInstrumentationOptions, sharedOptions);
    return [new instrumentation_fetch_1.FetchInstrumentation(fetchOpts), new faroXhrInstrumentation_1.FaroXhrInstrumentation(xhrOpts)];
}
function createFetchInstrumentationOptions(fetchInstrumentationOptions, sharedOptions) {
    return __assign(__assign(__assign(__assign({}, sharedOptions), { ignoreNetworkEvents: true }), fetchInstrumentationOptions), { 
        // always keep this function
        applyCustomAttributesOnSpan: (0, instrumentationUtils_1.fetchCustomAttributeFunctionWithDefaults)(fetchInstrumentationOptions === null || fetchInstrumentationOptions === void 0 ? void 0 : fetchInstrumentationOptions.applyCustomAttributesOnSpan) });
}
function createXhrInstrumentationOptions(xhrInstrumentationOptions, sharedOptions) {
    return __assign(__assign(__assign(__assign({}, sharedOptions), { ignoreNetworkEvents: true }), xhrInstrumentationOptions), { 
        // always keep this function
        applyCustomAttributesOnSpan: (0, instrumentationUtils_1.xhrCustomAttributeFunctionWithDefaults)(xhrInstrumentationOptions === null || xhrInstrumentationOptions === void 0 ? void 0 : xhrInstrumentationOptions.applyCustomAttributesOnSpan) });
}
//# sourceMappingURL=getDefaultOTELInstrumentations.js.map