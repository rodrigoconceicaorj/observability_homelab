{"version":3,"file":"instrumentationUtils.js","sourceRoot":"","sources":["../../src/instrumentationUtils.ts"],"names":[],"mappings":";;AAmBA,8DAGC;AAED,gFAEC;AAeD,4FAKC;AAED,wFAKC;AArDD,0CAAoD;AAUpD;;;;;;;;GAQG;AACH,SAAgB,yBAAyB,CAAC,IAAU,EAAE,QAA+B,EAAE,MAA6B;IAClH,IAAM,cAAc,GAAG,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;IACnE,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,kCAAkC,CAAC,IAAU,EAAE,GAAmB;IAChF,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAED,SAAS,aAAa,CAAC,IAAU,EAAE,cAAuB;IACxD,IAAI,cAAc,IAAI,IAAI,EAAE,CAAC;QAC3B,OAAO;IACT,CAAC;IAED,IAAM,OAAO,GAAG,cAAc,KAAK,CAAC,CAAC;IACrC,IAAM,qBAAqB,GAAG,cAAc,IAAI,GAAG,IAAI,cAAc,GAAG,GAAG,CAAC;IAE5E,IAAI,OAAO,IAAI,qBAAqB,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,oBAAc,CAAC,KAAK,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC;AAED,SAAgB,wCAAwC,CAAC,QAAuC;IAC9F,OAAO,UAAC,IAAU,EAAE,OAA8B,EAAE,MAA6B;QAC/E,yBAAyB,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACjD,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC,CAAC;AACJ,CAAC;AAED,SAAgB,sCAAsC,CAAC,QAAqC;IAC1F,OAAO,UAAC,IAAU,EAAE,GAAmB;QACrC,kCAAkC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC9C,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,EAAE,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { SpanStatusCode } from '@opentelemetry/api';\nimport type { Span } from '@opentelemetry/api';\nimport type { FetchCustomAttributeFunction } from '@opentelemetry/instrumentation-fetch';\nimport type { XHRCustomAttributeFunction } from '@opentelemetry/instrumentation-xml-http-request';\n\nexport interface FetchError {\n  status?: number;\n  message: string;\n}\n\n/**\n * Adds HTTP status code to every span.\n *\n * The fetch instrumentation does not always set the span status to error as defined by the spec.\n * To work around that issue we manually set the span status.\n *\n * Issue: https://github.com/open-telemetry/opentelemetry-js/issues/3564\n * Spec: https://github.com/open-telemetry/opentelemetry-specification/blob/v1.20.0/specification/trace/semantic_conventions/http.md#status\n */\nexport function setSpanStatusOnFetchError(span: Span, _request: Request | RequestInit, result: Response | FetchError) {\n  const httpStatusCode = result instanceof Error ? 0 : result.status;\n  setSpanStatus(span, httpStatusCode);\n}\n\nexport function setSpanStatusOnXMLHttpRequestError(span: Span, xhr: XMLHttpRequest) {\n  setSpanStatus(span, xhr.status);\n}\n\nfunction setSpanStatus(span: Span, httpStatusCode?: number) {\n  if (httpStatusCode == null) {\n    return;\n  }\n\n  const isError = httpStatusCode === 0;\n  const isClientOrServerError = httpStatusCode >= 400 && httpStatusCode < 600;\n\n  if (isError || isClientOrServerError) {\n    span.setStatus({ code: SpanStatusCode.ERROR });\n  }\n}\n\nexport function fetchCustomAttributeFunctionWithDefaults(callback?: FetchCustomAttributeFunction) {\n  return (span: Span, request: Request | RequestInit, result: Response | FetchError) => {\n    setSpanStatusOnFetchError(span, request, result);\n    callback?.(span, request, result);\n  };\n}\n\nexport function xhrCustomAttributeFunctionWithDefaults(callback?: XHRCustomAttributeFunction) {\n  return (span: Span, xhr: XMLHttpRequest) => {\n    setSpanStatusOnXMLHttpRequestError(span, xhr);\n    callback?.(span, xhr);\n  };\n}\n"]}