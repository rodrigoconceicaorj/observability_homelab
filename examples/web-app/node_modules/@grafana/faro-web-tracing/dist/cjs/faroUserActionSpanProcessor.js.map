{"version":3,"file":"faroUserActionSpanProcessor.js","sourceRoot":"","sources":["../../src/faroUserActionSpanProcessor.ts"],"names":[],"mappings":";;;AAAA,0CAA4D;AAG5D,sDAM+B;AAG/B;IAGE,qCAAoB,SAAwB;QAA5C,iBAWC;QAXmB,cAAS,GAAT,SAAS,CAAe;QAC1C,4BAAa,CAAC,SAAS,CAAC,UAAC,GAAG;YAC1B,IAAI,GAAG,CAAC,IAAI,KAAK,gCAAiB,EAAE,CAAC;gBACnC,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACnB,OAAO;YACT,CAAC;YAED,IAAI,CAAC,8BAAe,EAAE,+BAAgB,EAAE,iCAAkB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC/E,KAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gDAAU,GAAV;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC;IAED,6CAAO,GAAP,UAAQ,IAAU,EAAE,aAAsB;;QACxC,IAAI,IAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,EAAE,CAAC;YAClC,8JAA8J;YAC9J,oFAAoF;YACpF,yJAAyJ;YACzJ,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAC;gBAC9D,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,QAAQ,CAAC;YACxE,CAAC;QACH,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED,2CAAK,GAAL,UAAM,IAAkB;QACtB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,8CAAQ,GAAR;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IACH,kCAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,kEAA2B","sourcesContent":["import { type Context, SpanKind } from '@opentelemetry/api';\nimport type { ReadableSpan, Span, SpanProcessor } from '@opentelemetry/sdk-trace-web';\n\nimport {\n  apiMessageBus,\n  USER_ACTION_CANCEL,\n  USER_ACTION_END,\n  USER_ACTION_HALT,\n  USER_ACTION_START,\n} from '@grafana/faro-web-sdk';\nimport type { UserActionStartMessage } from '@grafana/faro-web-sdk';\n\nexport class FaroUserActionSpanProcessor implements SpanProcessor {\n  message: UserActionStartMessage | undefined;\n\n  constructor(private processor: SpanProcessor) {\n    apiMessageBus.subscribe((msg) => {\n      if (msg.type === USER_ACTION_START) {\n        this.message = msg;\n        return;\n      }\n\n      if ([USER_ACTION_END, USER_ACTION_HALT, USER_ACTION_CANCEL].includes(msg.type)) {\n        this.message = undefined;\n      }\n    });\n  }\n\n  forceFlush(): Promise<void> {\n    return this.processor.forceFlush();\n  }\n\n  onStart(span: Span, parentContext: Context): void {\n    if (span.kind === SpanKind.CLIENT) {\n      // If the span is created when the message object is available it is created before the user action timeout has been reached so it belongs to the user-action.\n      // In this case we can add the user action name and parentId to the span attributes.\n      // If the span is created after the user action timeout span, the message object will be undefined which means the action has been cancelled or is ended.\n      if (this.message) {\n        span.attributes['faro.action.user.name'] = this.message?.name;\n        span.attributes['faro.action.user.parentId'] = this.message?.parentId;\n      }\n    }\n\n    this.processor.onStart(span, parentContext);\n  }\n\n  onEnd(span: ReadableSpan): void {\n    this.processor.onEnd(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this.processor.shutdown();\n  }\n}\n"]}