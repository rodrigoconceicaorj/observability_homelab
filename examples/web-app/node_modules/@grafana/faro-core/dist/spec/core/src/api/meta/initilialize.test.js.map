{"version":3,"file":"initilialize.test.js","sourceRoot":"","sources":["../../../../../../src/api/meta/initilialize.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { initializeFaro } from '@grafana/faro-core';\nimport { mockConfig } from '@grafana/faro-core/src/testUtils';\n\nconst originalWindow = window;\n\ndescribe('Meta API', () => {\n  const mockUrl = 'http://dummy.com';\n\n  beforeEach(() => {\n    window = Object.create(window);\n    Object.defineProperty(window, 'location', {\n      value: {\n        href: mockUrl,\n      },\n      writable: true, // possibility to override\n    });\n  });\n\n  beforeEach(() => {\n    jest.resetModules();\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n  });\n\n  afterAll(() => {\n    window = originalWindow;\n  });\n\n  describe('setView', () => {\n    it('updates the view meta if the new view meta is different to the previous one', () => {\n      const { api } = initializeFaro(mockConfig());\n\n      const view = { name: 'my-view' };\n      api.setView(view);\n      let previousView = api.getView();\n      expect(previousView).toEqual(view);\n\n      const newView = { name: 'my-new-view' };\n      api.setView(newView);\n      previousView = api.getView();\n      expect(previousView).toEqual(newView);\n    });\n\n    it('does not update the view meta if the new view meta is identical to the previous one', () => {\n      const { api } = initializeFaro(mockConfig());\n\n      const view = { name: 'my-view' };\n      api.setView(view);\n      let previousView = api.getView();\n      expect(previousView).toEqual(view);\n\n      const newView = { name: 'my-view' };\n      api.setView(newView);\n      previousView = api.getView();\n      expect(previousView).toEqual(view);\n    });\n  });\n\n  describe('setSession', () => {\n    it('adds overrides to the session meta if provided via the setView() function call', () => {\n      const initialSession = { id: 'my-session' };\n\n      const { api } = initializeFaro(mockConfig({ sessionTracking: { enabled: false, session: initialSession } }));\n\n      expect(api.getSession()).toEqual(initialSession);\n\n      let overrides = { serviceName: 'service-1' };\n\n      const newSession = { id: 'my-new-session', attributes: { hello: 'world' } };\n      api.setSession(newSession, { overrides });\n      expect(api.getSession()).toEqual({ ...newSession, overrides });\n\n      overrides = { serviceName: 'service-2' };\n      api.setSession({}, { overrides });\n      expect(api.getSession()).toEqual({ overrides });\n\n      overrides = { serviceName: 'service-3' };\n      api.setSession(undefined, { overrides });\n      expect(api.getSession()).toEqual({ overrides });\n    });\n\n    it('merges the new overrides with the existing session meta overrides', () => {\n      const initialSession = { id: 'my-session' };\n\n      const mc = mockConfig({\n        sessionTracking: {\n          session: initialSession,\n        },\n        trackGeolocation: false,\n      });\n\n      // mockConfig is the result of calling makeCoreConfig in faro-web-sdk package.\n      // It it reads the geoLocationTracking properties it adds them to the sessionTracking.session.overrides object.\n      mc.sessionTracking!.session!.overrides = { geoLocationTrackingEnabled: false };\n\n      const { api } = initializeFaro(mc);\n\n      expect(api.getSession()?.id).toEqual(initialSession.id);\n      expect(api.getSession()?.overrides).toBeDefined();\n      expect(api.getSession()?.overrides).toStrictEqual({ geoLocationTrackingEnabled: false });\n\n      const overrides = { serviceName: 'service-1' };\n      const newSession = { id: 'my-new-session' };\n      api.setSession(newSession, { overrides });\n      expect(api.getSession()?.id).toEqual(newSession.id);\n      expect(api.getSession()?.overrides).toStrictEqual({ ...overrides, geoLocationTrackingEnabled: false });\n\n      const newOverrides = { serviceName: 'service-2' };\n      api.setSession(newSession, { overrides: newOverrides });\n      expect(api.getSession()?.id).toEqual(newSession.id);\n      expect(api.getSession()?.overrides).toStrictEqual({ ...newOverrides, geoLocationTrackingEnabled: false });\n    });\n  });\n\n  describe('setPage / getPage', () => {\n    it('updates the page meta when setPage(meta) is called', () => {\n      const { api } = initializeFaro(mockConfig());\n\n      const page = { url: 'http://example.com/my-page', id: 'my-page' };\n      api.setPage(page);\n      expect(api.getPage()).toEqual(page);\n\n      const newPage = { url: 'http://example.com/my-new-page', id: 'my-new-page' };\n      api.setPage(newPage);\n      expect(api.getPage()).toEqual(newPage);\n    });\n\n    it('updates the page id if the parameter of setPage is a string', () => {\n      const { api } = initializeFaro(mockConfig());\n\n      const initialPage = { url: 'http://example.com/my-page', id: 'my-page', attributes: { hello: 'world' } };\n      api.setPage(initialPage);\n      expect(api.getPage()).toStrictEqual(initialPage);\n\n      const newPageId = 'my-new-page-id';\n      api.setPage(newPageId);\n      expect(api.getPage()?.id).toEqual(newPageId);\n    });\n\n    it('gets the page meta when getPage(meta) is called', () => {\n      const { api } = initializeFaro(mockConfig());\n\n      const page = { url: 'http://example.com/my-page', id: 'my-page' };\n      api.setPage(page);\n      expect(api.getPage()).toEqual(page);\n    });\n\n    // Note: there's an integration test in the web-sdk that tests the following scenario:\n    // >>> it'sets the page meta correctly when setPage() is called and the locally cached meta is not set <<<\n    // This is because it needs web-sdk functions to be able to test the integration\n    // you can find it in the pageMeta test file: https://github.com/grafana/faro-web-sdk/blob/3c2ba0f8ea8bfdfb39cd79b704d9a6c07bc7834e/packages/web-sdk/src/metas/page/meta.test.ts#L10\n  });\n});\n"]}