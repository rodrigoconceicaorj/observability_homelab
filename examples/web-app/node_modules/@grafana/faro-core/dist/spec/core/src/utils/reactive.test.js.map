{"version":3,"file":"reactive.test.js","sourceRoot":"","sources":["../../../../../src/utils/reactive.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { isString, Observable } from '..';\n\ndescribe('Reactive', () => {\n  describe('Observable', () => {\n    it('Creates an observable, subscribe to it, and emit values', () => {\n      const observable = new Observable<number>();\n      const callback = jest.fn();\n\n      observable.subscribe(callback);\n      observable.notify(1);\n      observable.notify(2);\n\n      expect(callback).toHaveBeenCalledTimes(2);\n      expect(callback).toHaveBeenNthCalledWith(1, 1);\n      expect(callback).toHaveBeenNthCalledWith(2, 2);\n    });\n\n    it('Unsubscribes from an observable', () => {\n      const observable = new Observable<number>();\n      const callback = jest.fn();\n\n      const subscription = observable.subscribe(callback);\n      observable.notify(1);\n\n      subscription.unsubscribe();\n      observable.notify(2);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n      expect(callback).toHaveBeenCalledWith(1);\n    });\n\n    it('takes emitted values until the predicate returns false', () => {\n      const observable = new Observable<number>();\n      const callback = jest.fn();\n\n      observable.takeWhile((value) => value <= 2).subscribe(callback);\n      observable.notify(1);\n      observable.notify(2);\n      observable.notify(3);\n\n      expect(callback).toHaveBeenCalledTimes(2);\n      expect(callback).toHaveBeenNthCalledWith(1, 1);\n      expect(callback).toHaveBeenNthCalledWith(2, 2);\n    });\n\n    it('subscribes to the first emitted value and unsubscribes after', () => {\n      const observable = new Observable<number>();\n      const callback = jest.fn();\n\n      observable.first().subscribe(callback);\n      observable.notify(1);\n      observable.notify(2);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n      expect(callback).toHaveBeenCalledWith(1);\n    });\n\n    it('unsubscribes a callback from the list of subscribers', () => {\n      const observable = new Observable<number>();\n      const callback = jest.fn();\n\n      const sub = observable.subscribe(callback);\n      observable.notify(1);\n      sub.unsubscribe();\n      observable.notify(2);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n      expect(callback).toHaveBeenCalledWith(1);\n    });\n  });\n\n  describe('Merge', () => {\n    it('Merges multiple observables into a single observable using the merge() function', () => {\n      const observable1 = new Observable<number | string>();\n      const observable2 = new Observable<number | string>();\n      const callback = jest.fn();\n\n      const mergeObserverSub = new Observable<number | string>().merge(observable1, observable2).subscribe(callback);\n\n      observable1.notify(1);\n      observable2.notify('A');\n      observable1.notify(2);\n      observable2.notify('B');\n\n      expect(callback).toHaveBeenCalledTimes(4);\n      expect(callback).toHaveBeenNthCalledWith(1, 1);\n      expect(callback).toHaveBeenNthCalledWith(2, 'A');\n      expect(callback).toHaveBeenNthCalledWith(3, 2);\n      expect(callback).toHaveBeenNthCalledWith(4, 'B');\n\n      mergeObserverSub.unsubscribe();\n      observable1.notify(3);\n      observable2.notify('C');\n      expect(callback).toHaveBeenCalledTimes(4);\n      expect(callback).not.toHaveBeenNthCalledWith(5, 3);\n      expect(callback).not.toHaveBeenNthCalledWith(6, 'C');\n    });\n\n    it('Unsubscribes from all observables when merge.unsubscribeAll isCalled', () => {\n      const observable1 = new Observable<number>();\n      const observable2 = new Observable<number>();\n      const callback = jest.fn();\n\n      const mergeObserverSub = new Observable<number>().merge(observable1, observable2);\n      mergeObserverSub.subscribe(callback);\n\n      observable1.notify(1);\n      observable2.notify(2);\n\n      mergeObserverSub.unsubscribe(callback);\n      observable1.notify(3);\n      observable2.notify(4);\n\n      expect(callback).toHaveBeenCalledTimes(2);\n      expect(callback).toHaveBeenNthCalledWith(1, 1);\n      expect(callback).toHaveBeenNthCalledWith(2, 2);\n    });\n\n    it('Unsubscribes from all chained observables when unsubscribe is called on the final operator in the chain', () => {\n      const observable = new Observable<number>().takeWhile((value) => value < 3).filter((value) => !isString(value));\n      const callback = jest.fn();\n\n      let chainedSubscription = observable.subscribe(callback);\n\n      observable.notify(1);\n      observable.notify(2);\n      chainedSubscription.unsubscribe();\n      observable.notify(3);\n      observable.notify(4);\n      observable.notify(5);\n\n      expect(callback).toHaveBeenCalledTimes(2);\n      expect(callback).toHaveBeenCalledWith(2);\n\n      // If we would have a left over (pending) subscription, it would be called more times\n      callback.mockClear();\n      chainedSubscription = observable.subscribe(callback);\n      observable.notify(1);\n      observable.notify(2);\n      chainedSubscription.unsubscribe();\n\n      expect(callback).toHaveBeenCalledTimes(2);\n      expect(callback).toHaveBeenCalledWith(2);\n    });\n  });\n});\n"]}