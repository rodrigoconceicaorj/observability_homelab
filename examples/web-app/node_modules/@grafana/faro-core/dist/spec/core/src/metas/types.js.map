{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/metas/types.ts"],"names":[],"mappings":"","sourcesContent":["export type MetaGetter<P = Partial<Meta>> = () => P;\n\nexport type MetaItem<P = Partial<Meta>> = P | MetaGetter<P>;\n\nexport type MetasListener = (value: Meta) => void;\n\nexport interface Metas {\n  add: (...getters: MetaItem[]) => void;\n  remove: (...getters: MetaItem[]) => void;\n  addListener: (listener: MetasListener) => void;\n  removeListener: (listener: MetasListener) => void;\n  value: Meta;\n}\n\nexport type MetaAttributes = Record<string, string>;\n\nexport interface MetaSDKIntegration {\n  name?: string;\n  version?: string;\n}\n\nexport interface MetaSDK {\n  name?: string;\n  version?: string;\n  integrations?: MetaSDKIntegration[];\n}\n\nexport interface MetaApp {\n  name?: string;\n  namespace?: string;\n  release?: string;\n  version?: string;\n  environment?: string;\n  bundleId?: string;\n}\n\nexport interface MetaUser {\n  /**\n   * User email address.\n   */\n  email?: string;\n  /**\n   * Unique identifier\n   */\n  id?: string;\n  /**\n   * Short name or login/username of the user.\n   */\n  username?: string;\n  /**\n   * Userâ€™s full name\n   */\n  fullName?: string;\n  /**\n   * comma separated list of user roles. \"admin\",editor\" etc.\n   */\n  roles?: string;\n  /**\n   * Unique user hash to correlate information for a user in anonymized form.\n   */\n  hash?: string;\n  /**\n   * arbitrary user attributes, must be of type string.\n   */\n  attributes?: MetaAttributes;\n}\n\nexport interface MetaSession {\n  id?: string;\n  attributes?: MetaAttributes;\n  overrides?: MetaOverrides;\n}\n\nexport interface MetaPage {\n  id?: string;\n  url?: string;\n  attributes?: MetaAttributes;\n}\n\ninterface NavigatorUABrandVersion {\n  brand?: string;\n  version?: string;\n}\n\nexport interface MetaBrowser {\n  name?: string;\n  version?: string;\n  os?: string;\n  mobile?: boolean;\n  userAgent?: string;\n  language?: string;\n  brands?: NavigatorUABrandVersion[] | string;\n  viewportWidth?: string;\n  viewportHeight?: string;\n}\n\nexport interface MetaView {\n  name: string;\n}\n\nexport interface MetaK6 {\n  isK6Browser?: boolean;\n  testRunId?: string;\n}\n\nexport interface Meta {\n  sdk?: MetaSDK;\n  app?: MetaApp;\n  user?: MetaUser;\n  session?: MetaSession;\n  page?: MetaPage;\n  browser?: MetaBrowser;\n  view?: MetaView;\n  k6?: MetaK6;\n}\n\n/**\n * MetaOverrides are instructions that allow the receiver to override certain properties (Grafana Cloud only).\n */\nexport type MetaOverrides = {\n  /**\n   * New service name (Grafana Cloud only)\n   */\n  serviceName?: string;\n\n  /**\n   * Enable or disable geolocation tracking (Grafana Cloud only).\n   * Geolocation tracking must be enabled in the Grafana Cloud settings first.\n   * It cannot be enabled solely on the client side.\n   * This option allows control over tracking on the client side to comply with user\n   * privacy requirements.\n   */\n  geoLocationTrackingEnabled?: boolean;\n};\n"]}