{"version":3,"file":"faro.test.js","sourceRoot":"","sources":["../../../../src/faro.test.ts"],"names":[],"mappings":";;AACA,2CAA8C;AAC9C,yCAAwD;AAGxD,QAAQ,CAAC,MAAM,EAAE;IACf,EAAE,CAAC,gEAAgE,EAAE;QACnE,IAAM,SAAS,GAAG,IAAI,yBAAa,EAAE,CAAC;QAEtC,IAAM,IAAI,GAAG,IAAA,2BAAc,EACzB,IAAA,sBAAU,EAAC;YACT,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,IAAI;YACZ,UAAU,EAAE,CAAC,SAAS,CAAC;SACxB,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAExC,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAA6B,CAAC;QAC5D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE;;QAC5D,IAAM,SAAS,GAAG,IAAI,yBAAa,EAAE,CAAC;QACtC,IAAM,IAAI,GAAG,IAAA,2BAAc,EACzB,IAAA,sBAAU,EAAC;YACT,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,CAAC,SAAS,CAAC;SACxB,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAExC,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5B,IAAM,KAAK,GAAG,SAAS,CAAC,KAAuC,CAAC;QAChE,MAAM,CAAC,MAAA,KAAK,CAAC,CAAC,CAAC,0CAAE,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,MAAA,KAAK,CAAC,CAAC,CAAC,0CAAE,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { LogEvent } from './api';\nimport { initializeFaro } from './initialize';\nimport { mockConfig, MockTransport } from './testUtils';\nimport type { TransportItem } from './transports';\n\ndescribe('faro', () => {\n  it(`can be started paused and doesn't ingest events until unpaused`, () => {\n    const transport = new MockTransport();\n\n    const faro = initializeFaro(\n      mockConfig({\n        isolate: true,\n        paused: true,\n        transports: [transport],\n      })\n    );\n\n    faro.api.pushLog(['test']);\n    expect(transport.items).toHaveLength(0);\n\n    faro.unpause();\n    faro.api.pushLog(['test2']);\n    expect(transport.items).toHaveLength(1);\n\n    const item = transport.items[0]! as TransportItem<LogEvent>;\n    expect(item.payload.message).toEqual('test2');\n  });\n\n  it('can be started unpaused, then paused and unpaused again', () => {\n    const transport = new MockTransport();\n    const faro = initializeFaro(\n      mockConfig({\n        isolate: true,\n        transports: [transport],\n      })\n    );\n\n    faro.api.pushLog(['test1']);\n    expect(transport.items).toHaveLength(1);\n\n    faro.pause();\n    faro.api.pushLog(['test2']);\n    expect(transport.items).toHaveLength(1);\n\n    faro.unpause();\n    faro.api.pushLog(['test3']);\n    const items = transport.items as Array<TransportItem<LogEvent>>;\n    expect(items[0]?.payload.message).toEqual('test1');\n    expect(items[1]?.payload.message).toEqual('test3');\n  });\n});\n"]}