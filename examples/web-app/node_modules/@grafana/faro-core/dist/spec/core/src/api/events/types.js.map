{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../../src/api/events/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { SpanContext } from '@opentelemetry/api';\n\nimport type { TraceContext } from '../traces';\nimport type { UserAction } from '../types';\n\nexport type EventAttributes = Record<string, string>;\n\nexport interface EventEvent {\n  name: string;\n  timestamp: string;\n\n  domain?: string;\n  attributes?: EventAttributes;\n  trace?: TraceContext;\n\n  action?: UserAction;\n}\n\nexport interface PushEventOptions {\n  skipDedupe?: boolean;\n  spanContext?: Pick<SpanContext, 'traceId' | 'spanId'>;\n  timestampOverwriteMs?: number;\n\n  /**\n   * Allows manual transformation of the payload before adding it to the internal buffer.\n   *\n   * @param payload - The event payload to be transformed.\n   * @returns The transformed event payload.\n   *\n   * @remarks This should be used sparingly and only in special cases where custom payload processing cannot be deferred to the before-send hook.\n   */\n  customPayloadTransformer?: (payload: EventEvent) => EventEvent;\n}\n\nexport interface EventsAPI {\n  pushEvent: (name: string, attributes?: EventAttributes, domain?: string, options?: PushEventOptions) => void;\n}\n"]}