{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../../../src/transports/initialize.ts"],"names":[],"mappings":"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","sourcesContent":["import type { APIEvent, ExceptionEvent } from '../api';\nimport type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { Metas } from '../metas';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\n\nimport { BatchExecutor } from './batchExecutor';\nimport { TransportItemType } from './const';\nimport type { BeforeSendHook, Transport, TransportItem, Transports } from './types';\n\nexport function initializeTransports(\n  unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas\n): Transports {\n  internalLogger.debug('Initializing transports');\n\n  const transports: Transport[] = [];\n\n  let paused = config.paused;\n\n  let beforeSendHooks: BeforeSendHook[] = [];\n\n  const add: Transports['add'] = (...newTransports) => {\n    internalLogger.debug('Adding transports');\n\n    newTransports.forEach((newTransport) => {\n      internalLogger.debug(`Adding \"${newTransport.name}\" transport`);\n\n      const exists = transports.some((existingTransport) => existingTransport === newTransport);\n\n      if (exists) {\n        internalLogger.warn(`Transport ${newTransport.name} is already added`);\n\n        return;\n      }\n\n      newTransport.unpatchedConsole = unpatchedConsole;\n      newTransport.internalLogger = internalLogger;\n      newTransport.config = config;\n      newTransport.metas = metas;\n\n      transports.push(newTransport);\n    });\n  };\n\n  const addBeforeSendHooks: Transports['addBeforeSendHooks'] = (...newBeforeSendHooks) => {\n    internalLogger.debug('Adding beforeSendHooks\\n', beforeSendHooks);\n\n    newBeforeSendHooks.forEach((beforeSendHook) => {\n      if (beforeSendHook) {\n        beforeSendHooks.push(beforeSendHook);\n      }\n    });\n  };\n\n  const applyBeforeSendHooks = (items: TransportItem[]): TransportItem[] => {\n    let filteredItems = items;\n    for (const hook of beforeSendHooks) {\n      const modified = filteredItems.map(hook).filter(Boolean) as TransportItem[];\n\n      if (modified.length === 0) {\n        return [];\n      }\n\n      filteredItems = sanitizeItems(modified, config);\n    }\n    return filteredItems;\n  };\n\n  const batchedSend = (items: TransportItem[]) => {\n    const filteredItems = applyBeforeSendHooks(items);\n\n    if (filteredItems.length === 0) {\n      return;\n    }\n\n    for (const transport of transports) {\n      internalLogger.debug(`Transporting item using ${transport.name}\\n`, filteredItems);\n      if (transport.isBatched()) {\n        transport.send(filteredItems);\n      }\n    }\n  };\n\n  const instantSend = (item: TransportItem) => {\n    // prevent all beforeSend hooks being executed twice if batching is enabled.\n    if (config.batching?.enabled && transports.every((transport) => transport.isBatched())) {\n      return;\n    }\n\n    const [filteredItem] = applyBeforeSendHooks([item]);\n\n    if (filteredItem === undefined) {\n      return;\n    }\n\n    for (const transport of transports) {\n      internalLogger.debug(`Transporting item using ${transport.name}\\n`, filteredItem);\n      if (!transport.isBatched()) {\n        transport.send(filteredItem);\n      } else if (!config.batching?.enabled) {\n        transport.send([filteredItem]);\n      }\n    }\n  };\n\n  let batchExecutor: BatchExecutor | undefined;\n\n  if (config.batching?.enabled) {\n    batchExecutor = new BatchExecutor(batchedSend, {\n      sendTimeout: config.batching.sendTimeout,\n      itemLimit: config.batching.itemLimit,\n      paused,\n    });\n  }\n\n  // Send a signal to the appropriate transports\n  //\n  // 1. If SDK is paused, early return\n  // 2. If batching is not enabled send the signal to all transports\n  //    instantly.\n  // 3i. If batching is enabled, enqueue the signal\n  // 3ii. Send the signal instantly to all un-batched transports\n  const execute: Transports['execute'] = (item) => {\n    if (paused) {\n      return;\n    }\n\n    if (config.batching?.enabled) {\n      batchExecutor?.addItem(item);\n    }\n\n    instantSend(item);\n  };\n\n  const getBeforeSendHooks: Transports['getBeforeSendHooks'] = () => [...beforeSendHooks];\n\n  const isPaused: Transports['isPaused'] = () => paused;\n\n  const pause: Transports['pause'] = () => {\n    internalLogger.debug('Pausing transports');\n    batchExecutor?.pause();\n\n    paused = true;\n  };\n\n  const remove: Transports['remove'] = (...transportsToRemove) => {\n    internalLogger.debug('Removing transports');\n\n    transportsToRemove.forEach((transportToRemove) => {\n      internalLogger.debug(`Removing \"${transportToRemove.name}\" transport`);\n\n      const existingTransportIndex = transports.indexOf(transportToRemove);\n\n      if (existingTransportIndex === -1) {\n        internalLogger.warn(`Transport \"${transportToRemove.name}\" is not added`);\n\n        return;\n      }\n\n      transports.splice(existingTransportIndex, 1);\n    });\n  };\n\n  const removeBeforeSendHooks: Transports['removeBeforeSendHooks'] = (...beforeSendHooksToRemove) => {\n    beforeSendHooks.filter((beforeSendHook) => !beforeSendHooksToRemove.includes(beforeSendHook));\n  };\n\n  const unpause: Transports['unpause'] = () => {\n    internalLogger.debug('Unpausing transports');\n    batchExecutor?.start();\n\n    paused = false;\n  };\n\n  return {\n    add,\n    addBeforeSendHooks,\n    getBeforeSendHooks,\n    execute,\n    isPaused,\n    pause,\n    remove,\n    removeBeforeSendHooks,\n    get transports() {\n      return [...transports];\n    },\n    unpause,\n  };\n}\n/**\n * Removes the `payload.originalError` property from the provided `TransportItem[]` parameter.\n */\nfunction sanitizeItems(filteredItems: Array<TransportItem<APIEvent>>, config: Config<APIEvent>) {\n  if (config.preserveOriginalError) {\n    for (const item of filteredItems) {\n      if (item.type === TransportItemType.EXCEPTION) {\n        delete (item as TransportItem<ExceptionEvent<true>>).payload.originalError;\n      }\n    }\n  }\n\n  return filteredItems;\n}\n"]}