{"version":3,"file":"json.test.js","sourceRoot":"","sources":["../../../../../src/utils/json.test.ts"],"names":[],"mappings":";;AAAA,+BAAqG;AAErG,QAAQ,CAAC,MAAM,EAAE;IACf,EAAE,CAAC,6CAA6C,EAAE;QAChD,IAAM,QAAQ,GAAG,IAAA,oCAA6B,GAAE,CAAC;QAEjD,IAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACpB,GAAW,CAAC,QAAQ,GAAG,GAAG,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE;QAChF,IAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACpB,GAAW,CAAC,QAAQ,GAAG,GAAG,CAAC;QAE5B,MAAM,CAAC,IAAA,4BAAqB,EAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE;QAC7D,IAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;QAEjF,IAAM,2BAA2B,GAAG,IAAA,4BAAqB,EAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,CAAC,2BAA2B,CAAC,CAAC,aAAa,CAAC;YAChD,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,SAAS;YACZ,CAAC,EAAE,KAAK;YACR,CAAC,EAAE,MAAM;YACT,CAAC,EAAE,gBAAgB;YACnB,CAAC,EAAE,MAAM;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;YACrD,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE;QACpF,MAAM,CAAC,IAAA,4BAAqB,GAAE,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { getCircularDependencyReplacer, stringifyExternalJson, stringifyObjectValues } from './json';\n\ndescribe('json', () => {\n  it('replace circular references with null value', () => {\n    const replacer = getCircularDependencyReplacer();\n\n    const obj = { a: 1 };\n    (obj as any).circular = obj;\n\n    expect(JSON.stringify(obj, replacer)).toBe('{\"a\":1,\"circular\":null}');\n  });\n\n  it('stringifyExternalJson function replaces circular references with null value', () => {\n    const obj = { a: 1 };\n    (obj as any).circular = obj;\n\n    expect(stringifyExternalJson(obj)).toBe('{\"a\":1,\"circular\":null}');\n  });\n\n  it('stringifyObjectValues function stringifies object values', () => {\n    const obj = { a: 1, b: { c: 2 }, d: 'foo', e: true, f: [true, 'a', 1], g: null };\n\n    const objectWithStringifiedValues = stringifyObjectValues(obj);\n    expect(objectWithStringifiedValues).toStrictEqual({\n      a: '1',\n      b: '{\"c\":2}',\n      d: 'foo',\n      e: 'true',\n      f: '[true,\\\"a\\\",1]',\n      g: 'null',\n    });\n\n    Object.values(objectWithStringifiedValues).forEach((key) => {\n      expect(typeof key).toBe('string');\n    });\n  });\n\n  it('stringifyObjectValues function return an empty object if parameter is undefined', () => {\n    expect(stringifyObjectValues()).toStrictEqual({});\n  });\n});\n"]}