{"version":3,"file":"transports.test.js","sourceRoot":"","sources":["../../../../../src/transports/transports.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport type { ExceptionEvent } from '../api';\nimport { initializeFaro } from '../initialize';\nimport { mockConfig } from '../testUtils';\nimport { getCurrentTimestamp } from '../utils';\nimport { VERSION } from '../version';\n\nimport { BaseTransport } from './base';\nimport { TransportItemType } from './const';\nimport type { Transport, TransportItem } from './types';\n\nclass MockSingleTransport extends BaseTransport implements Transport {\n  readonly name = '@grafana/transport-mock';\n  readonly version = VERSION;\n\n  sentItems: TransportItem[] = [];\n\n  send(item: TransportItem): void | Promise<void> {\n    this.sentItems.push(item);\n  }\n}\n\nconst sendSingleMock = jest.spyOn(MockSingleTransport.prototype, 'send');\n\nclass MockTransport extends BaseTransport implements Transport {\n  readonly name = '@grafana/transport-single-mock';\n  readonly version = VERSION;\n\n  sentItems: TransportItem[] = [];\n\n  send(items: TransportItem[]): void | Promise<void> {\n    this.sentItems.push(...items);\n  }\n\n  override isBatched(): boolean {\n    return true;\n  }\n}\n\nconst sendMock = jest.spyOn(MockTransport.prototype, 'send');\n\ndescribe('transports', () => {\n  describe('config.beforeSend', () => {\n    it('will not send events that are rejected by beforeSend hook', () => {\n      const transport = new MockTransport();\n      const hookedItems: TransportItem[] = [];\n\n      const { transports } = initializeFaro(\n        mockConfig({\n          transports: [transport],\n          beforeSend: (item: TransportItem) => {\n            hookedItems.push(item);\n\n            if (item.type === TransportItemType.EXCEPTION && (item.payload as ErrorEvent).type === 'TypeError') {\n              return null;\n            }\n\n            return item;\n          },\n        })\n      );\n\n      transports.execute(makeExceptionTransportItem('Error', 'ResizeObserver loop limit exceeded'));\n      transports.execute(makeExceptionTransportItem('TypeError', '_.viz is undefined'));\n\n      expect(transport.sentItems).toHaveLength(1);\n      expect(hookedItems).toHaveLength(2);\n      expect((transport.sentItems[0]?.payload as ErrorEvent).type).toEqual('Error');\n    });\n\n    it('events can be modified by beforeSend hook', () => {\n      const transport = new MockTransport();\n\n      const { transports } = initializeFaro(\n        mockConfig({\n          transports: [transport],\n          beforeSend: (item: TransportItem) => {\n            if (item.type === TransportItemType.EXCEPTION) {\n              return {\n                ...item,\n                payload: {\n                  ...item.payload,\n                  type: 'NewType',\n                },\n              };\n            }\n            return item;\n          },\n        })\n      );\n\n      transports.execute(makeExceptionTransportItem('Error', 'ResizeObserver loop limit exceeded'));\n      expect(transport.sentItems).toHaveLength(1);\n      expect((transport.sentItems[0]?.payload as ErrorEvent).type).toEqual('NewType');\n    });\n\n    it('Only call beforeSentHooks once in batched mode.', () => {\n      const transport = new MockTransport();\n\n      const mockBeforeSend = jest.fn((item) => item);\n\n      const { transports } = initializeFaro(\n        mockConfig({\n          transports: [transport],\n          beforeSend: mockBeforeSend,\n          batching: {\n            enabled: true,\n            sendTimeout: 1,\n            itemLimit: 1,\n          },\n        })\n      );\n\n      transports.execute(makeExceptionTransportItem('Error', 'ResizeObserver loop limit exceeded'));\n      expect(mockBeforeSend).toHaveBeenCalledTimes(1);\n    });\n\n    it('Call beforeSentHooks two times if in batched mode but with an existing transport which is not batched', () => {\n      const transport = new MockTransport();\n\n      const nonBachedTransport = new MockTransport();\n      nonBachedTransport.isBatched = () => false;\n      (nonBachedTransport.name as any) = 'non-batched-transport';\n\n      const mockBeforeSend = jest.fn((item) => item);\n\n      const { transports } = initializeFaro(\n        mockConfig({\n          transports: [transport, nonBachedTransport],\n          beforeSend: mockBeforeSend,\n          batching: {\n            enabled: true,\n            sendTimeout: 1,\n            itemLimit: 1,\n          },\n        })\n      );\n\n      transports.execute(makeExceptionTransportItem('Error', 'ResizeObserver loop limit exceeded'));\n      expect(mockBeforeSend).toHaveBeenCalledTimes(2);\n    });\n\n    it('Sanitizes data before sending', () => {\n      const transport = new MockTransport();\n      const { api } = initializeFaro(\n        mockConfig({\n          isolate: true,\n          instrumentations: [],\n          transports: [transport],\n          batching: {\n            enabled: true,\n            itemLimit: 1,\n          },\n          preserveOriginalError: true,\n        })\n      );\n\n      api.pushError(new Error('Kaboom1'));\n      api.pushError(new Error('Kaboom2'));\n\n      expect(transport.sentItems).toHaveLength(2);\n      expect(transport.sentItems[0]).not.toHaveProperty('originalError');\n      expect(transport.sentItems[1]).not.toHaveProperty('originalError');\n    });\n\n    it('Original error is available in beforeSend function', () => {\n      const mockBeforeSend = jest.fn();\n      const transport = new MockTransport();\n      const { api } = initializeFaro(\n        mockConfig({\n          isolate: true,\n          instrumentations: [],\n          transports: [transport],\n          batching: {\n            enabled: true,\n            itemLimit: 1,\n          },\n          preserveOriginalError: true,\n          beforeSend: mockBeforeSend,\n        })\n      );\n\n      const myError = new Error('Kaboom');\n      api.pushError(myError, { originalError: myError });\n\n      expect(mockBeforeSend).toHaveBeenCalledTimes(1);\n      expect(mockBeforeSend.mock.calls[0][0]).toHaveProperty('payload.originalError', myError);\n    });\n  });\n\n  describe('multiple transports of the same type', () => {\n    const transport1 = new MockTransport();\n    const transport2 = new MockTransport();\n\n    const { transports } = initializeFaro(\n      mockConfig({\n        isolate: true,\n        instrumentations: [],\n        transports: [transport1, transport2],\n      })\n    );\n\n    it('will all be added and receive events', () => {\n      transports.execute(makeExceptionTransportItem('Error', 'ResizeObserver loop limit exceeded'));\n      expect(transport1.sentItems).toHaveLength(1);\n      expect(transport2.sentItems).toHaveLength(1);\n    });\n\n    it('one of them can be removed by instance', () => {\n      transports.remove(transport1);\n      transports.execute(makeExceptionTransportItem('Error', 'Kaboom'));\n      expect(transport1.sentItems).toHaveLength(1);\n      expect(transport2.sentItems).toHaveLength(2);\n    });\n  });\n\n  describe('test batched transports and single item ones', () => {\n    beforeAll(() => {\n      jest.useFakeTimers();\n    });\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('single item transports with batching enabled', () => {\n      const transport = new MockSingleTransport();\n      const { transports } = initializeFaro(\n        mockConfig({\n          isolate: true,\n          instrumentations: [],\n          transports: [transport],\n          batching: {\n            enabled: true,\n            sendTimeout: 1,\n          },\n        })\n      );\n\n      const item1 = makeExceptionTransportItem('Error', 'Kaboom');\n      const item2 = makeExceptionTransportItem('Error', 'Kaboom');\n\n      transports.execute(item1);\n      transports.execute(item2);\n      jest.advanceTimersByTime(1);\n\n      expect(sendSingleMock).toHaveBeenCalledTimes(2);\n      expect(sendSingleMock.mock.calls).toEqual([[item1], [item2]]);\n    });\n\n    it('multiple item transports', () => {\n      const transport = new MockTransport();\n      const { transports } = initializeFaro(\n        mockConfig({\n          isolate: true,\n          instrumentations: [],\n          transports: [transport],\n          batching: {\n            enabled: true,\n            sendTimeout: 1,\n          },\n        })\n      );\n\n      const item1 = makeExceptionTransportItem('Error', 'Kaboom');\n      const item2 = makeExceptionTransportItem('Error', 'Kaboom');\n\n      transports.execute(item1);\n      transports.execute(item2);\n      jest.advanceTimersByTime(1);\n\n      expect(sendMock).toHaveBeenCalledWith([item1, item2]);\n    });\n  });\n});\n\nfunction makeExceptionTransportItem(type: string, value: string): TransportItem<ExceptionEvent> {\n  return {\n    type: TransportItemType.EXCEPTION,\n    payload: {\n      type,\n      value,\n      timestamp: getCurrentTimestamp(),\n      stacktrace: {\n        frames: [],\n      },\n    },\n    meta: {},\n  };\n}\n"]}