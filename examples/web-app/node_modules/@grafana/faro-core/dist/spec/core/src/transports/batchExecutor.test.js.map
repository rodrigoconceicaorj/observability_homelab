{"version":3,"file":"batchExecutor.test.js","sourceRoot":"","sources":["../../../../../src/transports/batchExecutor.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;GAEG;AACH,wBAA0E;AAE1E,iDAAgD;AAEhD,IAAM,qBAAqB,GAAG,UAAC,UAAoB,IAA8B,OAAA,CAAC;IAChF,IAAI,EAAE,qBAAiB,CAAC,GAAG;IAC3B,OAAO,EAAE;QACP,OAAO,EAAE,EAAE;QACX,KAAK,EAAE,YAAQ,CAAC,IAAI;QACpB,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,0BAA0B;KACtC;IACD,IAAI,EAAE;QACJ,GAAG,EAAE;YACH,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;SAC9E;KACF;CACF,CAAC,EAb+E,CAa/E,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAM,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1B,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,6BAAa,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE;QACzB,SAAS,CAAC;YACR,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;gBACd,SAAS,EAAE,CAAC;aACb,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAEhD,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YACjC,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAClC,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YAEH,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iFAAiF,EAAE;YACpF,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,iBAAiB,EAAE;gBACjD,YAAY,EAAE,IAAI;gBAClB,GAAG;oBACD,OAAO,QAAQ,CAAC;gBAClB,CAAC;aACF,CAAC,CAAC;YACH,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4FAA4F,EAAE;YAC/F,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,iBAAiB,EAAE;gBACjD,YAAY,EAAE,IAAI;gBAClB,GAAG;oBACD,OAAO,SAAS,CAAC;gBACnB,CAAC;aACF,CAAC,CAAC;YACH,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;YACpC,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;gBACd,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAE5B,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE;YAC3B,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,EAAE,CAAC,KAAK,EAAE,CAAC;YACX,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAE5B,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE;YAC7B,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YACrC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjB,EAAE,CAAC,KAAK,EAAE,CAAC;YACX,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,KAAK,EAAE,CAAC;YAEX,MAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAChD,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE;YACrB,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,cAAO,CAAC,EAAE;gBACrC,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YACH,IAAM,iBAAiB,GAAG,kBAAI,KAAK,CAAC,CAAC,CAAC,QAAE,GAAG,CAAC,cAAM,OAAA,qBAAqB,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC;YAChF,IAAM,mBAAmB,GAAG,kBAAI,KAAK,CAAC,CAAC,CAAC,QAAE,GAAG,CAAC,cAAM,OAAA,qBAAqB,CAAC,IAAI,CAAC,EAA3B,CAA2B,CAAC,CAAC;YACjF,IAAM,MAAM,GAAG,EAAE,CAAC,UAAU,iCAAK,iBAAiB,SAAK,mBAAmB,QAAE,CAAC;YAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE;YACnB,IAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,IAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,gBAAgB,EAAE;gBAC7C,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;YACH,EAAE,CAAC,KAAK,EAAE,CAAC;YACX,IAAM,IAAI,GAAG,qBAAqB,EAAE,CAAC;YAErC,EAAE,CAAC,OAAO,uBACL,IAAI,KACP,IAAI,EAAE;oBACJ,GAAG,EAAE;wBACH,IAAI,EAAE,KAAK;qBACZ;iBACF,IACD,CAAC;YACH,EAAE,CAAC,OAAO,uBACL,IAAI,KACP,IAAI,EAAE;oBACJ,GAAG,EAAE;wBACH,IAAI,EAAE,KAAK;qBACZ;iBACF,IACD,CAAC;YAEH,EAAE,CAAC,OAAO,uBACL,IAAI,KACP,IAAI,EAAE;oBACJ,GAAG,EAAE;wBACH,IAAI,EAAE,KAAK;qBACZ;iBACF,IACD,CAAC;YAEH,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport { LogEvent, LogLevel, TransportItem, TransportItemType } from '..';\n\nimport { BatchExecutor } from './batchExecutor';\n\nconst generateTransportItem = (randomMeta?: boolean): TransportItem<LogEvent> => ({\n  type: TransportItemType.LOG,\n  payload: {\n    context: {},\n    level: LogLevel.INFO,\n    message: 'hi',\n    timestamp: '2023-01-27T09:53:01.035Z',\n  },\n  meta: {\n    sdk: {\n      name: randomMeta ? (Math.random() + 1).toString(36).substring(7) : 'test-sdk',\n    },\n  },\n});\n\ndescribe('BatchExecutor', () => {\n  it('tests instantiating BatchExecutor class', () => {\n    const sendSpy = jest.fn();\n    const be = new BatchExecutor(sendSpy);\n    expect(be).toBeInstanceOf(BatchExecutor);\n  });\n\n  describe('config options', () => {\n    afterEach(() => {\n      jest.restoreAllMocks();\n    });\n\n    beforeAll(() => {\n      jest.useFakeTimers();\n    });\n\n    it('tests send when exceeding batch size', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n        itemLimit: 2,\n      });\n\n      be.addItem(item);\n      expect(mockSendFunction).not.toHaveBeenCalled();\n\n      be.addItem(item);\n      expect(mockSendFunction).toHaveBeenCalledTimes(1);\n    });\n\n    it('tests send with empty buffer', () => {\n      const mockSendFunction = jest.fn();\n      new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n\n      jest.advanceTimersByTime(2);\n      expect(mockSendFunction).not.toHaveBeenCalled();\n    });\n\n    it('tests send when \"visibilitychange\" event is emitted and visibilityState changes', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n\n      be.addItem(item);\n      Object.defineProperty(document, 'visibilityState', {\n        configurable: true,\n        get() {\n          return 'hidden';\n        },\n      });\n      document.dispatchEvent(new Event('visibilitychange'));\n      expect(mockSendFunction).toHaveBeenCalledTimes(1);\n    });\n\n    it('tests send when \"visibilitychange\" event is emitted and visibilityState changes to visible', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n\n      be.addItem(item);\n      Object.defineProperty(document, 'visibilityState', {\n        configurable: true,\n        get() {\n          return 'visible';\n        },\n      });\n      document.dispatchEvent(new Event('visibilitychange'));\n      expect(mockSendFunction).toHaveBeenCalledTimes(0);\n    });\n\n    it('tests send when starting paused', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n        paused: true,\n      });\n\n      be.addItem(item);\n      jest.advanceTimersByTime(2);\n\n      expect(mockSendFunction).not.toHaveBeenCalled();\n    });\n\n    it('tests send when paused', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n\n      be.addItem(item);\n      be.pause();\n      jest.advanceTimersByTime(2);\n\n      expect(mockSendFunction).not.toHaveBeenCalled();\n    });\n\n    it('tests send when unpaused', () => {\n      const mockSendFunction = jest.fn();\n      const item = generateTransportItem();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n\n      be.addItem(item);\n      be.pause();\n      jest.advanceTimersByTime(2);\n      be.start();\n\n      expect(mockSendFunction).not.toHaveBeenCalled();\n      jest.advanceTimersByTime(2);\n      expect(mockSendFunction).toHaveBeenCalledTimes(1);\n    });\n\n    it('tests groupItems', () => {\n      const be = new BatchExecutor(() => {}, {\n        sendTimeout: 1,\n      });\n      const itemsWithSameMeta = [...Array(3)].map(() => generateTransportItem(false));\n      const itemsWithRandomMeta = [...Array(5)].map(() => generateTransportItem(true));\n      const groups = be.groupItems([...itemsWithSameMeta, ...itemsWithRandomMeta]);\n      expect(groups).toHaveLength(itemsWithRandomMeta.length + 1);\n    });\n\n    it('tests grouping', () => {\n      const mockSendFunction = jest.fn();\n      const be = new BatchExecutor(mockSendFunction, {\n        sendTimeout: 1,\n      });\n      be.start();\n      const item = generateTransportItem();\n\n      be.addItem({\n        ...item,\n        meta: {\n          sdk: {\n            name: 'foo',\n          },\n        },\n      });\n      be.addItem({\n        ...item,\n        meta: {\n          sdk: {\n            name: 'foo',\n          },\n        },\n      });\n\n      be.addItem({\n        ...item,\n        meta: {\n          sdk: {\n            name: 'bar',\n          },\n        },\n      });\n\n      jest.advanceTimersByTime(2);\n      expect(mockSendFunction).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n"]}