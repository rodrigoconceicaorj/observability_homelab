{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../../../../src/api/exceptions/initialize.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Config, Patterns } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItemType } from '../../transports';\nimport type { TransportItem, Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\nimport {\n  deepEqual,\n  getCurrentTimestamp,\n  isArray,\n  isEmpty,\n  isError,\n  isNull,\n  isObject,\n  stringifyExternalJson,\n  stringifyObjectValues,\n} from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nimport type { ItemBuffer } from '../ItemBuffer';\nimport type { TracesAPI } from '../traces';\nimport type { ApiMessageBusMessages } from '../types';\nimport { shouldIgnoreEvent } from '../utils';\n\nimport { defaultExceptionType } from './const';\nimport type { ErrorWithIndexProperties, ExceptionEvent, ExceptionsAPI, StacktraceParser } from './types';\n\nlet stacktraceParser: StacktraceParser | undefined;\n\nexport function initializeExceptionsAPI({\n  internalLogger,\n  config,\n  metas,\n  transports,\n  tracesApi,\n  actionBuffer,\n  getMessage,\n}: {\n  unpatchedConsole: UnpatchedConsole;\n  internalLogger: InternalLogger;\n  config: Config;\n  metas: Metas;\n  transports: Transports;\n  tracesApi: TracesAPI;\n  actionBuffer: ItemBuffer<TransportItem>;\n  getMessage: () => ApiMessageBusMessages | undefined;\n}): ExceptionsAPI {\n  internalLogger.debug('Initializing exceptions API');\n\n  let lastPayload: Pick<ExceptionEvent, 'type' | 'value' | 'stacktrace' | 'context'> | null = null;\n\n  stacktraceParser = config.parseStacktrace ?? stacktraceParser;\n\n  const changeStacktraceParser: ExceptionsAPI['changeStacktraceParser'] = (newStacktraceParser) => {\n    internalLogger.debug('Changing stacktrace parser');\n\n    stacktraceParser = newStacktraceParser ?? stacktraceParser;\n  };\n\n  const getStacktraceParser: ExceptionsAPI['getStacktraceParser'] = () => stacktraceParser;\n\n  const { ignoreErrors = [], preserveOriginalError } = config;\n\n  const pushError: ExceptionsAPI['pushError'] = (\n    error,\n    { skipDedupe, stackFrames, type, context, spanContext, timestampOverwriteMs, originalError } = {}\n  ) => {\n    if (isErrorIgnored(ignoreErrors, originalError ?? error)) {\n      return;\n    }\n    try {\n      const ctx = stringifyObjectValues({\n        ...parseCause(originalError ?? error),\n        ...(context ?? {}),\n      });\n\n      const item: TransportItem<ExceptionEvent<typeof preserveOriginalError>> = {\n        meta: metas.value,\n        payload: {\n          type: type || error.name || defaultExceptionType,\n          value: error.message,\n          timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(),\n          trace: spanContext\n            ? {\n                trace_id: spanContext.traceId,\n                span_id: spanContext.spanId,\n              }\n            : tracesApi.getTraceContext(),\n          ...(isEmpty(ctx) ? {} : { context: ctx }),\n          ...(preserveOriginalError ? { originalError } : {}),\n        },\n        type: TransportItemType.EXCEPTION,\n      };\n\n      stackFrames = stackFrames ?? (error.stack ? stacktraceParser?.(error).frames : undefined);\n\n      if (stackFrames?.length) {\n        item.payload.stacktrace = {\n          frames: stackFrames,\n        };\n      }\n\n      const testingPayload = {\n        type: item.payload.type,\n        value: item.payload.value,\n        stackTrace: item.payload.stacktrace,\n        context: item.payload.context,\n      };\n\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping error push because it is the same as the last one\\n', item.payload);\n\n        return;\n      }\n\n      lastPayload = testingPayload;\n\n      internalLogger.debug('Pushing exception\\n', item);\n\n      const msg = getMessage();\n      if (msg && msg.type === USER_ACTION_START) {\n        actionBuffer.addItem(item);\n      } else {\n        transports.execute(item);\n      }\n    } catch (err) {\n      internalLogger.error('Error pushing event', err);\n    }\n  };\n\n  changeStacktraceParser(config.parseStacktrace);\n\n  return {\n    changeStacktraceParser,\n    getStacktraceParser,\n    pushError,\n  };\n}\n\nfunction parseCause(error: ErrorWithIndexProperties): {} | { cause: string } {\n  let cause = error.cause;\n\n  if (isError(cause)) {\n    cause = error.cause.toString();\n    // typeof operator on null returns \"object\". This is a well-known quirk in JavaScript and is considered a bug that cannot be fixed due to backward compatibility issues.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null\n  } else if (cause !== null && (isObject(error.cause) || isArray(error.cause))) {\n    cause = stringifyExternalJson(error.cause);\n  } else if (cause != null) {\n    cause = error.cause.toString();\n  }\n\n  return cause == null ? {} : { cause };\n}\n\nfunction isErrorIgnored(ignoreErrors: Patterns, error: ErrorWithIndexProperties): boolean {\n  const { message, name, stack } = error;\n  return shouldIgnoreEvent(ignoreErrors, message + ' ' + name + ' ' + stack);\n}\n"]}