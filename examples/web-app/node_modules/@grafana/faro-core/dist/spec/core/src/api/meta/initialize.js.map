{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../../../../src/api/meta/initialize.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Meta, Metas } from '../../metas';\nimport type { TransportItem, Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\nimport { isEmpty, isString } from '../../utils/is';\nimport type { ItemBuffer } from '../ItemBuffer';\nimport type { TracesAPI } from '../traces';\nimport type { ApiMessageBusMessages } from '../types';\n\nimport type { MetaAPI } from './types';\n\nexport function initializeMetaAPI({\n  internalLogger,\n  metas,\n}: {\n  unpatchedConsole: UnpatchedConsole;\n  internalLogger: InternalLogger;\n  config: Config;\n  metas: Metas;\n  transports: Transports;\n  tracesApi: TracesAPI;\n  actionBuffer: ItemBuffer<TransportItem>;\n  getMessage: () => ApiMessageBusMessages | undefined;\n}): MetaAPI {\n  internalLogger.debug('Initializing meta API');\n\n  let metaSession: Partial<Meta> | undefined = undefined;\n  let metaUser: Partial<Meta> | undefined = undefined;\n  let metaView: Partial<Meta> | undefined = undefined;\n  let metaPage: Partial<Meta> | undefined = undefined;\n\n  const setUser: MetaAPI['setUser'] = (user) => {\n    if (metaUser) {\n      metas.remove(metaUser);\n    }\n\n    metaUser = {\n      user,\n    };\n\n    metas.add(metaUser);\n  };\n\n  const setSession: MetaAPI['setSession'] = (session, options) => {\n    const newOverrides = options?.overrides;\n    const overrides = newOverrides\n      ? {\n          overrides: {\n            ...metaSession?.session?.overrides,\n            ...newOverrides,\n          },\n        }\n      : {};\n\n    if (metaSession) {\n      metas.remove(metaSession);\n    }\n\n    metaSession = {\n      session: {\n        // if session is undefined, session manager force creates a new session\n        ...(isEmpty(session) ? undefined : session),\n        ...overrides,\n      },\n    };\n\n    metas.add(metaSession);\n  };\n\n  const getSession: MetaAPI['getSession'] = () => metas.value.session;\n\n  const setView: MetaAPI['setView'] = (view, options) => {\n    if (options?.overrides) {\n      setSession(getSession(), { overrides: options.overrides });\n    }\n\n    if (metaView?.view?.name === view?.name) {\n      return;\n    }\n\n    const previousView = metaView;\n\n    metaView = {\n      view,\n    };\n\n    metas.add(metaView);\n\n    if (previousView) {\n      metas.remove(previousView);\n    }\n  };\n\n  const getView: MetaAPI['getView'] = () => metas.value.view;\n\n  const setPage: MetaAPI['setPage'] = (page) => {\n    const pageMeta = isString(page)\n      ? {\n          // metaPage is available once setPage() has been called.\n          // This is because page self updating metas like page need to be added as a function\n          // Thus we call getPage in case metaPage is empty\n          ...(metaPage?.page ?? getPage()),\n          id: page,\n        }\n      : page;\n\n    if (metaPage) {\n      metas.remove(metaPage);\n    }\n\n    metaPage = {\n      page: pageMeta,\n    };\n\n    metas.add(metaPage);\n  };\n\n  const getPage: MetaAPI['getPage'] = () => metas.value.page;\n\n  return {\n    setUser,\n    resetUser: setUser as MetaAPI['resetUser'],\n    setSession,\n    resetSession: setSession as MetaAPI['resetSession'],\n    getSession,\n    setView,\n    getView,\n    setPage,\n    getPage,\n  };\n}\n"]}