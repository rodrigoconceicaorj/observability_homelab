{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../../../../src/api/traces/initialize.ts"],"names":[],"mappings":";;AASA,kDA0DC;AAhED,+CAAqD;AAMrD,SAAgB,mBAAmB,CACjC,iBAAmC,EACnC,cAA8B,EAC9B,OAAe,EACf,KAAY,EACZ,UAAsB;IAEtB,cAAc,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAEhD,IAAI,IAAI,GAAwB,SAAS,CAAC;IAE1C,IAAM,QAAQ,GAA0B,UAAC,KAAK,EAAE,OAAO;QACrD,cAAc,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAEnD,IAAI,GAAG;YACL,KAAK,OAAA;YACL,OAAO,SAAA;SACR,CAAC;IACJ,CAAC,CAAC;IAEF,IAAM,eAAe,GAAiC;QACpD,IAAM,GAAG,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAE9D,OAAO,CAAC,GAAG;YACT,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,QAAQ,EAAE,GAAG,CAAC,OAAO;gBACrB,OAAO,EAAE,GAAG,CAAC,MAAM;aACpB,CAAC;IACR,CAAC,CAAC;IAEF,IAAM,UAAU,GAA4B,UAAC,OAAO;QAClD,IAAI,CAAC;YACH,IAAM,IAAI,GAA8B;gBACtC,IAAI,EAAE,8BAAiB,CAAC,KAAK;gBAC7B,OAAO,SAAA;gBACP,IAAI,EAAE,KAAK,CAAC,KAAK;aAClB,CAAC;YAEF,cAAc,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;YAE9C,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,cAAc,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;QACrD,CAAC;IACH,CAAC,CAAC;IAEF,IAAM,OAAO,GAAyB,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;IAEjD,IAAM,iBAAiB,GAAmC,cAAM,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC;IAEvE,OAAO;QACL,OAAO,SAAA;QACP,eAAe,iBAAA;QACf,QAAQ,UAAA;QACR,iBAAiB,mBAAA;QACjB,UAAU,YAAA;KACX,CAAC;AACJ,CAAC","sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItemType } from '../../transports';\nimport type { TransportItem, Transports } from '../../transports/types';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\n\nimport type { OTELApi, TraceEvent, TracesAPI } from './types';\n\nexport function initializeTracesAPI(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  _config: Config,\n  metas: Metas,\n  transports: Transports\n): TracesAPI {\n  internalLogger.debug('Initializing traces API');\n\n  let otel: OTELApi | undefined = undefined;\n\n  const initOTEL: TracesAPI['initOTEL'] = (trace, context) => {\n    internalLogger.debug('Initializing OpenTelemetry');\n\n    otel = {\n      trace,\n      context,\n    };\n  };\n\n  const getTraceContext: TracesAPI['getTraceContext'] = () => {\n    const ctx = otel?.trace.getSpanContext(otel.context.active());\n\n    return !ctx\n      ? undefined\n      : {\n          trace_id: ctx.traceId,\n          span_id: ctx.spanId,\n        };\n  };\n\n  const pushTraces: TracesAPI['pushTraces'] = (payload) => {\n    try {\n      const item: TransportItem<TraceEvent> = {\n        type: TransportItemType.TRACE,\n        payload,\n        meta: metas.value,\n      };\n\n      internalLogger.debug('Pushing trace\\n', item);\n\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing trace\\n', err);\n    }\n  };\n\n  const getOTEL: TracesAPI['getOTEL'] = () => otel;\n\n  const isOTELInitialized: TracesAPI['isOTELInitialized'] = () => !!otel;\n\n  return {\n    getOTEL,\n    getTraceContext,\n    initOTEL,\n    isOTELInitialized,\n    pushTraces,\n  };\n}\n"]}