{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../../../../src/transports/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IResourceSpans } from '@opentelemetry/otlp-transformer/build/src/trace/internal-types';\n\nimport {\n  EventEvent,\n  ExceptionEvent,\n  getTransportBody,\n  LogEvent,\n  Meta,\n  TraceEvent,\n  TransportItem,\n  TransportItemType,\n} from '..';\nimport { getCurrentTimestamp, LogLevel } from '../utils';\n\nimport { mergeResourceSpans } from './utils';\n\ndescribe('utils', () => {\n  describe('mergeResourceSpans', () => {\n    it('tests merging with empty traces or resourceSpans', () => {\n      expect(mergeResourceSpans()).toEqual(undefined);\n    });\n\n    it('tests merging with empty traces and some resourceSpans', () => {\n      const rs = [generateResourceSpan('thisspan')];\n      expect(mergeResourceSpans(undefined, rs)).toEqual({ resourceSpans: rs });\n    });\n\n    it('tests merging with traces that do not have a resource and resourceSpans', () => {\n      let traces = generateTraceEvent('trace');\n      traces.payload.resourceSpans = [];\n      const rs = [generateResourceSpan('thisspan')];\n      expect(mergeResourceSpans(traces.payload, rs)).toEqual({ resourceSpans: [] });\n    });\n\n    it('tests merging with traces and resourceSpans', () => {\n      let traces = generateTraceEvent('trace');\n      const rs = [generateResourceSpan('thisspan')];\n      expect(mergeResourceSpans(traces.payload, rs)).toEqual({\n        ...traces.payload,\n        resourceSpans: [\n          {\n            ...(traces.payload.resourceSpans?.[0] || []),\n            scopeSpans: [...(traces.payload.resourceSpans?.[0]?.scopeSpans || []), ...(rs[0]?.scopeSpans || [])],\n          },\n        ],\n      });\n    });\n  });\n\n  describe('getTransportBody', () => {\n    it('test creating a body with a single item', () => {\n      const log = generateLog('This is a log');\n      const body = getTransportBody([log]);\n      expect(body).toEqual({\n        logs: [log.payload],\n        meta: {},\n      });\n    });\n\n    it('test creating a body with a two items of the same type', () => {\n      const log1 = generateLog('This is a log');\n      const log2 = generateLog('This is also a log');\n      const body = getTransportBody([log1, log2]);\n      expect(body).toEqual({\n        logs: [log1.payload, log2.payload],\n        meta: {},\n      });\n    });\n\n    it('test creating a body with a items different type (no trace)', () => {\n      const log = generateLog('This is a log');\n      const event = generateEvent('session_start');\n      const exception = generateException('TypeError');\n\n      const body = getTransportBody([log, event, exception]);\n      expect(body).toEqual({\n        logs: [log.payload],\n        events: [event.payload],\n        exceptions: [exception.payload],\n        meta: {},\n      });\n    });\n\n    it('test creating a body with a items different type (with traces)', () => {\n      const log1 = generateLog('This is a log');\n      const log2 = generateLog('This is also a log');\n      const trace1 = generateTraceEvent('session_start');\n      const trace2 = generateTraceEvent('session_end');\n\n      const body = getTransportBody([log1, log2, trace1, trace2]);\n      expect(body).toEqual({\n        logs: [log1.payload, log2.payload],\n        traces: {\n          resourceSpans: [\n            {\n              resource: trace1.payload.resourceSpans?.[0]?.resource,\n              scopeSpans: [\n                ...(trace1.payload.resourceSpans?.[0]?.scopeSpans || []),\n                ...(trace2.payload.resourceSpans?.[0]?.scopeSpans || []),\n              ],\n            },\n          ],\n        },\n        meta: {},\n      });\n    });\n  });\n});\n\nfunction generateLog(message: string, meta: Meta = {}): TransportItem<LogEvent> {\n  return {\n    type: TransportItemType.LOG,\n    payload: {\n      context: {},\n      level: LogLevel.LOG,\n      message,\n      timestamp: getCurrentTimestamp(),\n    },\n    meta,\n  };\n}\n\nfunction generateException(value: string, meta: Meta = {}): TransportItem<ExceptionEvent> {\n  return {\n    type: TransportItemType.EXCEPTION,\n    payload: {\n      value,\n      type: 'exception',\n      timestamp: getCurrentTimestamp(),\n    },\n    meta,\n  };\n}\n\nfunction generateEvent(name: string, meta: Meta = {}): TransportItem<EventEvent> {\n  return {\n    type: TransportItemType.EVENT,\n    payload: {\n      name,\n      timestamp: getCurrentTimestamp(),\n    },\n    meta,\n  };\n}\n\nfunction generateResourceSpan(name: string): IResourceSpans {\n  return {\n    resource: {\n      attributes: [],\n      droppedAttributesCount: 0,\n    },\n    scopeSpans: [\n      {\n        scope: {\n          name: '@opentelemetry/instrumentation-document-load',\n          version: '0.31.0',\n        },\n        spans: [\n          {\n            traceId: 'd6bba34860089d3a4ee58df0811b2f5f',\n            spanId: '22c85dd7b7c674e8',\n            parentSpanId: '16cff06b28240ca6',\n            name: 'resourceFetch',\n            kind: 1,\n            startTimeUnixNano: 1679329154423000000,\n            endTimeUnixNano: 1679329154449000000,\n            attributes: [\n              {\n                key: 'session_id',\n                value: {\n                  stringValue: 'KBw5UzUuvF',\n                },\n              },\n              {\n                key: 'component',\n                value: {\n                  stringValue: 'document-load',\n                },\n              },\n              {\n                key: 'http.url',\n                value: {\n                  stringValue:\n                    'http://localhost:5173/@fs/Users/marcoschaefer/Code/faro-web-sdk/packages/web-sdk/dist/esm/transports/otlp/index.js?t=1679329135042',\n                },\n              },\n              {\n                key: 'http.response_content_length',\n                value: {\n                  intValue: 671,\n                },\n              },\n            ],\n            droppedAttributesCount: 0,\n            events: [\n              {\n                attributes: [],\n                name,\n                timeUnixNano: 1679329154423000000,\n                droppedAttributesCount: 0,\n              },\n            ],\n            droppedEventsCount: 0,\n            status: {\n              code: 0,\n            },\n            links: [],\n            droppedLinksCount: 0,\n          },\n        ],\n      },\n    ],\n  };\n}\n\nfunction generateTraceEvent(name: string, meta: Meta = {}): TransportItem<TraceEvent> {\n  return {\n    type: TransportItemType.TRACE,\n    payload: {\n      resourceSpans: [generateResourceSpan(name)],\n    },\n    meta,\n  };\n}\n"]}