{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../src/instrumentations/initialize.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,gEA6EC;AA7ED,SAAgB,0BAA0B,CACxC,gBAAkC,EAClC,cAA8B,EAC9B,MAAc,EACd,KAAY,EACZ,UAAsB,EACtB,GAAQ;IAER,cAAc,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAEtD,IAAM,gBAAgB,GAAsB,EAAE,CAAC;IAE/C,IAAM,GAAG,GAA4B;QAAC,6BAAsB;aAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;YAAtB,wCAAsB;;QAC1D,cAAc,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAEhD,mBAAmB,CAAC,OAAO,CAAC,UAAC,kBAAkB;YAC7C,cAAc,CAAC,KAAK,CAAC,mBAAW,kBAAkB,CAAC,IAAI,uBAAmB,CAAC,CAAC;YAE5E,IAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAClC,UAAC,uBAAuB,IAAK,OAAA,uBAAuB,CAAC,IAAI,KAAK,kBAAkB,CAAC,IAAI,EAAxD,CAAwD,CACtF,CAAC;YAEF,IAAI,MAAM,EAAE,CAAC;gBACX,cAAc,CAAC,IAAI,CAAC,0BAAmB,kBAAkB,CAAC,IAAI,sBAAmB,CAAC,CAAC;gBAEnF,OAAO;YACT,CAAC;YAED,kBAAkB,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACvD,kBAAkB,CAAC,cAAc,GAAG,cAAc,CAAC;YACnD,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;YACnC,kBAAkB,CAAC,KAAK,GAAG,KAAK,CAAC;YACjC,kBAAkB,CAAC,UAAU,GAAG,UAAU,CAAC;YAC3C,kBAAkB,CAAC,GAAG,GAAG,GAAG,CAAC;YAE7B,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAE1C,kBAAkB,CAAC,UAAU,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAM,MAAM,GAA+B;QAAC,kCAA2B;aAA3B,UAA2B,EAA3B,qBAA2B,EAA3B,IAA2B;YAA3B,6CAA2B;;QACrE,cAAc,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAElD,wBAAwB,CAAC,OAAO,CAAC,UAAC,uBAAuB;;YACvD,cAAc,CAAC,KAAK,CAAC,qBAAa,uBAAuB,CAAC,IAAI,uBAAmB,CAAC,CAAC;YAEnF,IAAM,4BAA4B,GAAG,gBAAgB,CAAC,MAAM,CAC1D,UAAC,GAAG,EAAE,uBAAuB,EAAE,sBAAsB;gBACnD,IAAI,GAAG,KAAK,IAAI,IAAI,uBAAuB,CAAC,IAAI,KAAK,uBAAuB,CAAC,IAAI,EAAE,CAAC;oBAClF,OAAO,sBAAsB,CAAC;gBAChC,CAAC;gBAED,OAAO,IAAI,CAAC;YACd,CAAC,EACD,IAAI,CACL,CAAC;YAEF,IAAI,4BAA4B,KAAK,IAAI,EAAE,CAAC;gBAC1C,cAAc,CAAC,IAAI,CAAC,4BAAoB,uBAAuB,CAAC,IAAI,oBAAgB,CAAC,CAAC;gBAEtF,OAAO;YACT,CAAC;YAED,MAAA,MAAA,gBAAgB,CAAC,4BAA4B,CAAE,EAAC,OAAO,kDAAI,CAAC;YAE5D,gBAAgB,CAAC,MAAM,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,GAAG,KAAA;QACH,IAAI,gBAAgB;YAClB,yBAAW,gBAAgB,QAAE;QAC/B,CAAC;QACD,MAAM,QAAA;KACP,CAAC;AACJ,CAAC","sourcesContent":["import type { API } from '../api';\nimport type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { Metas } from '../metas';\nimport type { Transports } from '../transports';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\n\nimport type { Instrumentation, Instrumentations } from './types';\n\nexport function initializeInstrumentations(\n  unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas,\n  transports: Transports,\n  api: API\n): Instrumentations {\n  internalLogger.debug('Initializing instrumentations');\n\n  const instrumentations: Instrumentation[] = [];\n\n  const add: Instrumentations['add'] = (...newInstrumentations) => {\n    internalLogger.debug('Adding instrumentations');\n\n    newInstrumentations.forEach((newInstrumentation) => {\n      internalLogger.debug(`Adding \"${newInstrumentation.name}\" instrumentation`);\n\n      const exists = instrumentations.some(\n        (existingInstrumentation) => existingInstrumentation.name === newInstrumentation.name\n      );\n\n      if (exists) {\n        internalLogger.warn(`Instrumentation ${newInstrumentation.name} is already added`);\n\n        return;\n      }\n\n      newInstrumentation.unpatchedConsole = unpatchedConsole;\n      newInstrumentation.internalLogger = internalLogger;\n      newInstrumentation.config = config;\n      newInstrumentation.metas = metas;\n      newInstrumentation.transports = transports;\n      newInstrumentation.api = api;\n\n      instrumentations.push(newInstrumentation);\n\n      newInstrumentation.initialize();\n    });\n  };\n\n  const remove: Instrumentations['remove'] = (...instrumentationsToRemove) => {\n    internalLogger.debug('Removing instrumentations');\n\n    instrumentationsToRemove.forEach((instrumentationToRemove) => {\n      internalLogger.debug(`Removing \"${instrumentationToRemove.name}\" instrumentation`);\n\n      const existingInstrumentationIndex = instrumentations.reduce<number | null>(\n        (acc, existingInstrumentation, existingTransportIndex) => {\n          if (acc === null && existingInstrumentation.name === instrumentationToRemove.name) {\n            return existingTransportIndex;\n          }\n\n          return null;\n        },\n        null\n      );\n\n      if (existingInstrumentationIndex === null) {\n        internalLogger.warn(`Instrumentation \"${instrumentationToRemove.name}\" is not added`);\n\n        return;\n      }\n\n      instrumentations[existingInstrumentationIndex]!.destroy?.();\n\n      instrumentations.splice(existingInstrumentationIndex, 1);\n    });\n  };\n\n  return {\n    add,\n    get instrumentations() {\n      return [...instrumentations];\n    },\n    remove,\n  };\n}\n"]}