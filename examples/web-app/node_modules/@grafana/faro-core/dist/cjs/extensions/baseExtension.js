"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseExtension = void 0;
var internalLogger_1 = require("../internalLogger");
var unpatchedConsole_1 = require("../unpatchedConsole");
var BaseExtension = /** @class */ (function () {
    function BaseExtension() {
        this.unpatchedConsole = unpatchedConsole_1.defaultUnpatchedConsole;
        this.internalLogger = internalLogger_1.defaultInternalLogger;
        this.config = {};
        this.metas = {};
    }
    BaseExtension.prototype.logDebug = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.internalLogger).debug.apply(_a, __spreadArray(["".concat(this.name, "\n")], args, false));
    };
    BaseExtension.prototype.logInfo = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.internalLogger).info.apply(_a, __spreadArray(["".concat(this.name, "\n")], args, false));
    };
    BaseExtension.prototype.logWarn = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.internalLogger).warn.apply(_a, __spreadArray(["".concat(this.name, "\n")], args, false));
    };
    BaseExtension.prototype.logError = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.internalLogger).error.apply(_a, __spreadArray(["".concat(this.name, "\n")], args, false));
    };
    return BaseExtension;
}());
exports.BaseExtension = BaseExtension;
//# sourceMappingURL=baseExtension.js.map