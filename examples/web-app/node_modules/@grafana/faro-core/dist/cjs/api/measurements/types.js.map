{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/api/measurements/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { SpanContext } from '@opentelemetry/api';\n\nimport type { TraceContext } from '../traces';\nimport type { UserAction } from '../types';\n\nexport type MeasurementContext = Record<string, string>;\n\nexport interface MeasurementEvent<V extends { [label: string]: number } = { [label: string]: number }> {\n  type: string;\n  values: V;\n\n  timestamp: string;\n  trace?: TraceContext;\n  context?: MeasurementContext;\n\n  action?: UserAction;\n}\n\nexport interface PushMeasurementOptions {\n  skipDedupe?: boolean;\n  context?: MeasurementContext;\n  spanContext?: Pick<SpanContext, 'traceId' | 'spanId'>;\n  timestampOverwriteMs?: number;\n}\n\nexport interface MeasurementsAPI {\n  pushMeasurement: (\n    payload: Omit<MeasurementEvent, 'timestamp'> & Partial<Pick<MeasurementEvent, 'timestamp'>>,\n    options?: PushMeasurementOptions\n  ) => void;\n}\n"]}