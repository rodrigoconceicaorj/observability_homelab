"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockConfig = mockConfig;
var config_1 = require("../config");
var internalLogger_1 = require("../internalLogger");
var mockStacktraceParser_1 = require("./mockStacktraceParser");
function mockConfig(overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __assign({ app: {
            name: 'test',
            version: '1.0.0',
        }, batching: {
            enabled: false,
        }, dedupe: true, globalObjectKey: 'faro', internalLoggerLevel: internalLogger_1.defaultInternalLoggerLevel, instrumentations: [], isolate: true, metas: [], parseStacktrace: mockStacktraceParser_1.mockStacktraceParser, paused: false, preventGlobalExposure: true, transports: [], unpatchedConsole: console, sessionTracking: __assign({}, config_1.defaultBatchingConfig) }, overrides);
}
//# sourceMappingURL=mockConfig.js.map