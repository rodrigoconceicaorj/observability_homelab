{"version":3,"file":"mockConfig.js","sourceRoot":"","sources":["../../../src/testUtils/mockConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAKA,gCAyBC;AA9BD,oCAA+D;AAC/D,oDAA+D;AAE/D,+DAA8D;AAE9D,SAAgB,UAAU,CAAC,SAA+B;IAA/B,0BAAA,EAAA,cAA+B;IACxD,kBACE,GAAG,EAAE;YACH,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,OAAO;SACjB,EACD,QAAQ,EAAE;YACR,OAAO,EAAE,KAAK;SACf,EACD,MAAM,EAAE,IAAI,EACZ,eAAe,EAAE,MAAM,EACvB,mBAAmB,EAAE,2CAA0B,EAC/C,gBAAgB,EAAE,EAAE,EACpB,OAAO,EAAE,IAAI,EACb,KAAK,EAAE,EAAE,EACT,eAAe,EAAE,2CAAoB,EACrC,MAAM,EAAE,KAAK,EACb,qBAAqB,EAAE,IAAI,EAC3B,UAAU,EAAE,EAAE,EACd,gBAAgB,EAAE,OAAO,EACzB,eAAe,eACV,8BAAqB,KAEvB,SAAS,EACZ;AACJ,CAAC","sourcesContent":["import { type Config, defaultBatchingConfig } from '../config';\nimport { defaultInternalLoggerLevel } from '../internalLogger';\n\nimport { mockStacktraceParser } from './mockStacktraceParser';\n\nexport function mockConfig(overrides: Partial<Config> = {}): Config {\n  return {\n    app: {\n      name: 'test',\n      version: '1.0.0',\n    },\n    batching: {\n      enabled: false,\n    },\n    dedupe: true,\n    globalObjectKey: 'faro',\n    internalLoggerLevel: defaultInternalLoggerLevel,\n    instrumentations: [],\n    isolate: true,\n    metas: [],\n    parseStacktrace: mockStacktraceParser,\n    paused: false,\n    preventGlobalExposure: true,\n    transports: [],\n    unpatchedConsole: console,\n    sessionTracking: {\n      ...defaultBatchingConfig,\n    },\n    ...overrides,\n  };\n}\n"]}