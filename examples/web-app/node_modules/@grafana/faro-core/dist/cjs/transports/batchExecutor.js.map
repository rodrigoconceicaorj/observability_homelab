{"version":3,"file":"batchExecutor.js","sourceRoot":"","sources":["../../../src/transports/batchExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransportItem } from '../';\n\nimport type { BatchExecutorOptions, SendFn } from './types';\n\nconst DEFAULT_SEND_TIMEOUT_MS = 250;\nconst DEFAULT_BATCH_ITEM_LIMIT = 50;\n\nexport class BatchExecutor {\n  private readonly itemLimit: number;\n  private readonly sendTimeout: number;\n\n  private signalBuffer: TransportItem[] = [];\n  private sendFn: SendFn;\n  private paused: boolean;\n  private flushInterval: number;\n\n  constructor(sendFn: SendFn, options?: BatchExecutorOptions) {\n    this.itemLimit = options?.itemLimit ?? DEFAULT_BATCH_ITEM_LIMIT;\n    this.sendTimeout = options?.sendTimeout ?? DEFAULT_SEND_TIMEOUT_MS;\n    this.paused = options?.paused || false;\n    this.sendFn = sendFn;\n    this.flushInterval = -1;\n\n    if (!this.paused) {\n      this.start();\n    }\n\n    // Send batched/buffered data when user navigates to new page, switches or closes the tab, minimizes or closes the browser.\n    // If on mobile, it also sends data if user switches from the browser to a different app.\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.flush();\n      }\n    });\n  }\n\n  addItem(item: TransportItem): void {\n    if (this.paused) {\n      return;\n    }\n\n    this.signalBuffer.push(item);\n\n    if (this.signalBuffer.length >= this.itemLimit) {\n      this.flush();\n    }\n  }\n\n  start(): void {\n    this.paused = false;\n    if (this.sendTimeout > 0) {\n      this.flushInterval = window.setInterval(() => this.flush(), this.sendTimeout);\n    }\n  }\n\n  pause(): void {\n    this.paused = true;\n    clearInterval(this.flushInterval);\n  }\n\n  groupItems(items: TransportItem[]): TransportItem[][] {\n    const itemMap = new Map<string, TransportItem[]>();\n    items.forEach((item) => {\n      const metaKey = JSON.stringify(item.meta);\n\n      let currentItems = itemMap.get(metaKey);\n      if (currentItems === undefined) {\n        currentItems = [item];\n      } else {\n        currentItems = [...currentItems, item];\n      }\n\n      itemMap.set(metaKey, currentItems);\n    });\n    return Array.from(itemMap.values());\n  }\n\n  private flush() {\n    if (this.paused || this.signalBuffer.length === 0) {\n      return;\n    }\n\n    const itemGroups = this.groupItems(this.signalBuffer);\n    itemGroups.forEach(this.sendFn);\n    this.signalBuffer = [];\n  }\n}\n"]}