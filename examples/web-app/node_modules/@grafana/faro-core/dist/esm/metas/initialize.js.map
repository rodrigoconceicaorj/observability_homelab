{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../src/metas/initialize.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAItC,MAAM,UAAU,eAAe,CAC7B,iBAAmC,EACnC,cAA8B,EAC9B,OAAe;IAEf,IAAI,KAAK,GAAe,EAAE,CAAC;IAC3B,IAAI,SAAS,GAAoB,EAAE,CAAC;IAEpC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,CAAO,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAEnH,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;YAEzB,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACnD,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,GAAG,GAAiB,CAAC,GAAG,QAAQ,EAAE,EAAE;QACxC,cAAc,CAAC,KAAK,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAEjD,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;QAExB,eAAe,EAAE,CAAC;IACpB,CAAC,CAAC;IAEF,MAAM,MAAM,GAAoB,CAAC,GAAG,aAAa,EAAE,EAAE;QACnD,cAAc,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;QAExD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;QAE5E,eAAe,EAAE,CAAC;IACpB,CAAC,CAAC;IAEF,MAAM,WAAW,GAAyB,CAAC,QAAQ,EAAE,EAAE;QACrD,cAAc,CAAC,KAAK,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;QAE1D,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,cAAc,GAA4B,CAAC,QAAQ,EAAE,EAAE;QAC3D,cAAc,CAAC,KAAK,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QAE5D,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC;IAClF,CAAC,CAAC;IAEF,OAAO;QACL,GAAG;QACH,MAAM;QACN,WAAW;QACX,cAAc;QACd,IAAI,KAAK;YACP,OAAO,QAAQ,EAAE,CAAC;QACpB,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\nimport { isFunction } from '../utils';\n\nimport type { Meta, MetaItem, Metas, MetasListener } from './types';\n\nexport function initializeMetas(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  _config: Config\n): Metas {\n  let items: MetaItem[] = [];\n  let listeners: MetasListener[] = [];\n\n  const getValue = () => items.reduce<Meta>((acc, item) => Object.assign(acc, isFunction(item) ? item() : item), {});\n\n  const notifyListeners = () => {\n    if (listeners.length) {\n      const value = getValue();\n\n      listeners.forEach((listener) => listener(value));\n    }\n  };\n\n  const add: Metas['add'] = (...newItems) => {\n    internalLogger.debug('Adding metas\\n', newItems);\n\n    items.push(...newItems);\n\n    notifyListeners();\n  };\n\n  const remove: Metas['remove'] = (...itemsToRemove) => {\n    internalLogger.debug('Removing metas\\n', itemsToRemove);\n\n    items = items.filter((currentItem) => !itemsToRemove.includes(currentItem));\n\n    notifyListeners();\n  };\n\n  const addListener: Metas['addListener'] = (listener) => {\n    internalLogger.debug('Adding metas listener\\n', listener);\n\n    listeners.push(listener);\n  };\n\n  const removeListener: Metas['removeListener'] = (listener) => {\n    internalLogger.debug('Removing metas listener\\n', listener);\n\n    listeners = listeners.filter((currentListener) => currentListener !== listener);\n  };\n\n  return {\n    add,\n    remove,\n    addListener,\n    removeListener,\n    get value() {\n      return getValue();\n    },\n  };\n}\n"]}