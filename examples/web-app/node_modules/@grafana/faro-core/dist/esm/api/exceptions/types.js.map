{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/api/exceptions/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { SpanContext } from '@opentelemetry/api';\n\nimport type { TraceContext } from '../traces';\nimport type { UserAction } from '../types';\n\nexport type StacktraceParser = (err: ExtendedError) => Stacktrace;\n\nexport interface ExceptionStackFrame {\n  filename: string;\n  function: string;\n\n  colno?: number;\n  lineno?: number;\n\n  bundleid?: string;\n}\n\nexport interface ExtendedError extends Error {\n  columnNumber?: number;\n  stacktrace?: Error['stack'];\n}\n\nexport interface Stacktrace {\n  frames: ExceptionStackFrame[];\n}\n\nexport type ExceptionContext = Record<string, string>;\n\nexport interface ExceptionEventDefault {\n  timestamp: string;\n  type: string;\n  value: string;\n\n  stacktrace?: Stacktrace;\n  trace?: TraceContext;\n  context?: ExceptionContext;\n\n  action?: UserAction;\n}\n\n/**\n * The ExceptionEventExtended type is used to represent an exception event with an additional error\n * property and is only meant for client side use. The additional property is removed by Faro before\n * sending the event to the transport.\n */\nexport type ExceptionEventExtended = ExceptionEventDefault & {\n  originalError?: Error;\n};\n\nexport type ExceptionEvent<EXTENDED = ExceptionEventDefault> = EXTENDED extends boolean\n  ? ExceptionEventExtended\n  : ExceptionEventDefault;\n\nexport interface PushErrorOptions {\n  skipDedupe?: boolean;\n  stackFrames?: ExceptionStackFrame[];\n  type?: string;\n  context?: ExceptionContext;\n  spanContext?: Pick<SpanContext, 'traceId' | 'spanId'>;\n  timestampOverwriteMs?: number;\n  /**\n   * Retains the original error object in the payload after parsing.\n   * This is primarily for internal, advanced use cases.\n   * Faro users should not need to use this option.\n   */\n  originalError?: Error;\n}\n\n// ts type is missing the cause property\nexport type ErrorWithIndexProperties = Error & {\n  cause?: any;\n};\n\nexport interface ExceptionsAPI {\n  changeStacktraceParser: (stacktraceParser: StacktraceParser) => void;\n  getStacktraceParser: () => StacktraceParser | undefined;\n  pushError: (value: ErrorWithIndexProperties, options?: PushErrorOptions) => void;\n}\n"]}