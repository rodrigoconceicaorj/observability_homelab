{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../../../src/api/measurements/initialize.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAGrD,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAE,OAAO,EAAE,MAAM,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AACrG,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAO7C,MAAM,UAAU,yBAAyB,CAAC,EACxC,cAAc,EACd,MAAM,EACN,KAAK,EACL,UAAU,EACV,SAAS,EACT,YAAY,EACZ,UAAU,GAUX;IACC,cAAc,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAEtD,IAAI,WAAW,GAAiE,IAAI,CAAC;IAErF,MAAM,eAAe,GAAuC,CAC1D,OAAO,EACP,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,oBAAoB,EAAE,GAAG,EAAE,EAC/D,EAAE;QACF,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAE3C,MAAM,IAAI,GAAoC;gBAC5C,IAAI,EAAE,iBAAiB,CAAC,WAAW;gBACnC,OAAO,kCACF,OAAO,KACV,KAAK,EAAE,WAAW;wBAChB,CAAC,CAAC;4BACE,QAAQ,EAAE,WAAW,CAAC,OAAO;4BAC7B,OAAO,EAAE,WAAW,CAAC,MAAM;yBAC5B;wBACH,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE,EAC/B,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,EACpG,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,GACxC;gBACD,IAAI,EAAE,KAAK,CAAC,KAAK;aAClB,CAAC;YAEF,MAAM,cAAc,GAAG;gBACrB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;aAC9B,CAAC;YAEF,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,EAAE,CAAC;gBACnG,cAAc,CAAC,KAAK,CAAC,oEAAoE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEzG,OAAO;YACT,CAAC;YAED,WAAW,GAAG,cAAc,CAAC;YAE7B,cAAc,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;YAEpD,MAAM,GAAG,GAAG,UAAU,EAAE,CAAC;YACzB,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;gBAC1C,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC;iBAAM,CAAC;gBACN,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,cAAc,CAAC,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC,CAAC;IAEF,OAAO;QACL,eAAe;KAChB,CAAC;AACJ,CAAC","sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItemType } from '../../transports';\nimport type { TransportItem, Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\nimport { deepEqual, getCurrentTimestamp, isEmpty, isNull, stringifyObjectValues } from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nimport type { ItemBuffer } from '../ItemBuffer';\nimport type { TracesAPI } from '../traces';\nimport type { ApiMessageBusMessages } from '../types';\n\nimport type { MeasurementEvent, MeasurementsAPI } from './types';\n\nexport function initializeMeasurementsAPI({\n  internalLogger,\n  config,\n  metas,\n  transports,\n  tracesApi,\n  actionBuffer,\n  getMessage,\n}: {\n  unpatchedConsole: UnpatchedConsole;\n  internalLogger: InternalLogger;\n  config: Config;\n  metas: Metas;\n  transports: Transports;\n  tracesApi: TracesAPI;\n  actionBuffer: ItemBuffer<TransportItem>;\n  getMessage: () => ApiMessageBusMessages | undefined;\n}): MeasurementsAPI {\n  internalLogger.debug('Initializing measurements API');\n\n  let lastPayload: Pick<MeasurementEvent, 'type' | 'values' | 'context'> | null = null;\n\n  const pushMeasurement: MeasurementsAPI['pushMeasurement'] = (\n    payload,\n    { skipDedupe, context, spanContext, timestampOverwriteMs } = {}\n  ) => {\n    try {\n      const ctx = stringifyObjectValues(context);\n\n      const item: TransportItem<MeasurementEvent> = {\n        type: TransportItemType.MEASUREMENT,\n        payload: {\n          ...payload,\n          trace: spanContext\n            ? {\n                trace_id: spanContext.traceId,\n                span_id: spanContext.spanId,\n              }\n            : tracesApi.getTraceContext(),\n          timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(),\n          context: isEmpty(ctx) ? undefined : ctx,\n        },\n        meta: metas.value,\n      };\n\n      const testingPayload = {\n        type: item.payload.type,\n        values: item.payload.values,\n        context: item.payload.context,\n      };\n\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping measurement push because it is the same as the last one\\n', item.payload);\n\n        return;\n      }\n\n      lastPayload = testingPayload;\n\n      internalLogger.debug('Pushing measurement\\n', item);\n\n      const msg = getMessage();\n      if (msg && msg.type === USER_ACTION_START) {\n        actionBuffer.addItem(item);\n      } else {\n        transports.execute(item);\n      }\n    } catch (err) {\n      internalLogger.error('Error pushing measurement\\n', err);\n    }\n  };\n\n  return {\n    pushMeasurement,\n  };\n}\n"]}