{"version":3,"file":"reactive.js","sourceRoot":"","sources":["../../../src/utils/reactive.ts"],"names":[],"mappings":"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","sourcesContent":["export type Subscription = {\n  unsubscribe: () => void;\n};\n\ntype Subscriber<T> = (value: T) => void;\n\nexport class Observable<T = any> {\n  private subscribers: Array<Subscriber<T>> = [];\n\n  subscribe(subscriber: Subscriber<T>): Subscription {\n    this.subscribers.push(subscriber);\n    return {\n      unsubscribe: () => this.unsubscribe(subscriber),\n    };\n  }\n\n  unsubscribe(subscriber: Subscriber<T>): void {\n    this.subscribers = this.subscribers.filter((sub) => sub !== subscriber);\n  }\n\n  notify(value: T): void {\n    this.subscribers.forEach((subscriber) => subscriber(value));\n  }\n\n  first(): Observable<T> {\n    const result = new Observable<T>();\n\n    const internalSubscriber = (data: T): void => {\n      result.notify(data);\n      subscription.unsubscribe();\n    };\n    const subscription = this.subscribe(internalSubscriber);\n    const resultUnsubscribeFn = result.unsubscribe.bind(result);\n    return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n  }\n\n  takeWhile(predicate: (value: T) => boolean): Observable<T> {\n    const result = new Observable<T>();\n    const internalSubscriber = (value: T): void => {\n      if (predicate(value)) {\n        result.notify(value);\n      } else {\n        result.unsubscribe(internalSubscriber);\n      }\n    };\n    this.subscribe(internalSubscriber);\n    const resultUnsubscribeFn = result.unsubscribe.bind(result);\n    return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n  }\n\n  filter(predicate: (value: T) => boolean): Observable<T> {\n    const result = new Observable<T>();\n\n    const internalSubscriber = (value: T): void => {\n      if (predicate(value)) {\n        result.notify(value);\n      }\n    };\n    this.subscribe(internalSubscriber);\n\n    const resultUnsubscribeFn = result.unsubscribe.bind(result);\n    return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n  }\n\n  merge(...observables: Array<Observable<T>>): Observable<T> {\n    const mergerObservable = new Observable<T>();\n    const subscriptions: Subscription[] = [];\n\n    observables.forEach((observable) => {\n      const subscription = observable.subscribe((value: T) => {\n        mergerObservable.notify(value);\n      });\n\n      subscriptions.push(subscription);\n    });\n\n    const originalUnsubscribeAll = mergerObservable.unsubscribeAll.bind(mergerObservable);\n\n    mergerObservable.unsubscribe = () => {\n      subscriptions.forEach((subscription) => subscription.unsubscribe());\n      originalUnsubscribeAll();\n    };\n\n    return mergerObservable;\n  }\n\n  private withUnsubscribeOverride(\n    observable: Observable<T>,\n    resultUnsubscribeFn: (subscriber: Subscriber<T>) => void,\n    internalSubscriber: Subscriber<T>\n  ) {\n    observable.unsubscribe = (subscriber: Subscriber<T>) => {\n      resultUnsubscribeFn(subscriber);\n      this.unsubscribe(internalSubscriber);\n    };\n\n    return observable;\n  }\n\n  private unsubscribeAll(): void {\n    this.subscribers = [];\n  }\n}\n"]}