{"version":3,"file":"httpRequestMonitor.js","sourceRoot":"","sources":["../../../../src/instrumentations/userActions/httpRequestMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { genShortID, Observable } from '@grafana/faro-core';\n\nimport { getUrlFromResource, isUrlIgnored } from '../../utils/url';\n\nimport { MESSAGE_TYPE_HTTP_REQUEST_END, MESSAGE_TYPE_HTTP_REQUEST_START } from './const';\nimport type { HttpRequestEndMessage, HttpRequestMessagePayload, HttpRequestStartMessage } from './types';\n\ntype RequestProps = HttpRequestMessagePayload;\n\nconst apiTypeFetch = 'fetch';\nconst apiTypeXhr = 'xhr';\n\n/**\n * Monitors if any http requests are in progress.\n */\nexport function monitorHttpRequests(): Observable<HttpRequestStartMessage | HttpRequestEndMessage> {\n  const observable = new Observable<HttpRequestStartMessage | HttpRequestEndMessage>();\n\n  function emitStartMessage(requestProps: RequestProps) {\n    observable.notify({\n      type: MESSAGE_TYPE_HTTP_REQUEST_START,\n      request: requestProps,\n    });\n  }\n\n  function emitEndMessage(requestProps: RequestProps) {\n    observable.notify({\n      type: MESSAGE_TYPE_HTTP_REQUEST_END,\n      request: requestProps,\n    });\n  }\n\n  monitorFetch({\n    onRequestStart: emitStartMessage,\n    onRequestEnd: emitEndMessage,\n  });\n\n  monitorXhr({\n    onRequestStart: emitStartMessage,\n    onRequestEnd: emitEndMessage,\n  });\n\n  return observable;\n}\n\nfunction monitorXhr({\n  onRequestStart,\n  onRequestEnd,\n}: {\n  onRequestStart: (props: RequestProps) => void;\n  onRequestEnd: (props: RequestProps) => void;\n}) {\n  const originalOpen = XMLHttpRequest.prototype.open;\n\n  XMLHttpRequest.prototype.open = function () {\n    const url = arguments[1];\n    const isIgnoredUrl = isUrlIgnored(url);\n    const method = arguments[0];\n\n    const requestId = genShortID();\n\n    // request has started to load data.\n    this.addEventListener('loadstart', function () {\n      if (!isIgnoredUrl) {\n        onRequestStart({ url, method, requestId, apiType: apiTypeXhr });\n      }\n    });\n\n    // transaction completes successfully.\n    this.addEventListener('load', function () {\n      if (!isIgnoredUrl) {\n        onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n      }\n    });\n\n    this.addEventListener('error', function () {\n      if (!isIgnoredUrl) {\n        onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n      }\n    });\n\n    this.addEventListener('abort', function () {\n      if (!isIgnoredUrl) {\n        onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n      }\n    });\n\n    originalOpen.apply(this, arguments as any);\n  };\n}\n\nfunction monitorFetch({\n  onRequestEnd,\n  onRequestStart,\n}: {\n  onRequestStart: (props: RequestProps) => void;\n  onRequestEnd: (props: RequestProps) => void;\n}) {\n  const originalFetch = window.fetch;\n\n  window.fetch = function () {\n    const url = getUrlFromResource(arguments[0]) ?? '';\n    const isIgnoredUrl = isUrlIgnored(url);\n    const method = (arguments[1] ?? {}).method;\n\n    const requestId = genShortID();\n\n    if (!isIgnoredUrl) {\n      onRequestStart({ url, method, requestId, apiType: apiTypeFetch });\n    }\n\n    return originalFetch\n      .apply(this, arguments as any)\n      .then((response) => {\n        if (!isIgnoredUrl) {\n          onRequestEnd({ url, method, requestId, apiType: apiTypeFetch });\n        }\n        return response;\n      })\n      .catch((error) => {\n        if (!isIgnoredUrl) {\n          onRequestEnd({ url, method, requestId, apiType: apiTypeFetch });\n        }\n        throw error;\n      });\n  };\n}\n"]}