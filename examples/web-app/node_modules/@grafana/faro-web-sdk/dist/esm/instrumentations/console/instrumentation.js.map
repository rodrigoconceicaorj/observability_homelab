{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/console/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  allLogLevels,\n  BaseInstrumentation,\n  defaultErrorArgsSerializer,\n  defaultLogArgsSerializer,\n  LogLevel,\n  VERSION,\n} from '@grafana/faro-core';\nimport type { LogArgsSerializer } from '@grafana/faro-core';\n\nimport { getDetailsFromConsoleErrorArgs } from '../errors/getErrorDetails';\n\nimport type { ConsoleInstrumentationOptions } from './types';\n\nexport class ConsoleInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-console';\n  readonly version = VERSION;\n\n  static defaultDisabledLevels: LogLevel[] = [LogLevel.DEBUG, LogLevel.TRACE, LogLevel.LOG];\n  static consoleErrorPrefix = 'console.error: ';\n  private errorSerializer: LogArgsSerializer = defaultLogArgsSerializer;\n\n  constructor(private options: ConsoleInstrumentationOptions = {}) {\n    super();\n  }\n\n  initialize() {\n    this.options = { ...this.options, ...this.config.consoleInstrumentation };\n\n    const serializeErrors = this.options?.serializeErrors || !!this.options?.errorSerializer;\n    this.errorSerializer = serializeErrors\n      ? (this.options?.errorSerializer ?? defaultErrorArgsSerializer)\n      : defaultLogArgsSerializer;\n\n    allLogLevels\n      .filter(\n        (level) => !(this.options?.disabledLevels ?? ConsoleInstrumentation.defaultDisabledLevels).includes(level)\n      )\n      .forEach((level) => {\n        /* eslint-disable-next-line no-console */\n        console[level] = (...args) => {\n          try {\n            if (level === LogLevel.ERROR && !this.options?.consoleErrorAsLog) {\n              const { value, type, stackFrames } = getDetailsFromConsoleErrorArgs(args, this.errorSerializer);\n\n              if (value && !type && !stackFrames) {\n                this.api.pushError(new Error(ConsoleInstrumentation.consoleErrorPrefix + value));\n                return;\n              }\n\n              this.api.pushError(new Error(ConsoleInstrumentation.consoleErrorPrefix + value), { type, stackFrames });\n            } else if (level === LogLevel.ERROR && this.options?.consoleErrorAsLog) {\n              const { value, type, stackFrames } = getDetailsFromConsoleErrorArgs(args, this.errorSerializer);\n\n              this.api.pushLog(value ? [ConsoleInstrumentation.consoleErrorPrefix + value] : args, {\n                level,\n                context: {\n                  value: value ?? '',\n                  type: type ?? '',\n                  stackFrames: stackFrames?.length ? defaultErrorArgsSerializer(stackFrames) : '',\n                },\n              });\n            } else {\n              this.api.pushLog(args, { level });\n            }\n          } catch (err) {\n            this.logError(err);\n          } finally {\n            this.unpatchedConsole[level](...args);\n          }\n        };\n      });\n  }\n}\n"]}