{"version":3,"file":"resource.js","sourceRoot":"","sources":["../../../../src/instrumentations/performance/resource.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,wDA+CC;AA5DD,gDAAsD;AAGtD,uCAA+C;AAE/C,+DAAwD;AACxD,uDAAuH;AAKvH,IAAM,uBAAuB,GAAG,EAAE,aAAa,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE,CAAC;AAE/E,SAAgB,sBAAsB,CACpC,gBAAwB,EACxB,SAAiC,EACjC,UAA4C;IAE5C,IAAM,cAAc,GAAG,gBAAI,CAAC,MAAM,CAAC,cAAc,CAAC;IAElD,IAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,UAAC,eAAe;QACvD,IAAM,OAAO,GAAG,eAAe,CAAC,UAAU,EAAE,CAAC;QAE7C,KAA+B,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE,CAAC;YAApC,IAAM,gBAAgB,gBAAA;YACzB,IAAI,IAAA,kBAAY,EAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxC,OAAO;YACT,CAAC;YAED,IAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAEpD,IAAI,WAAW,GAAgB,IAAA,iDAA8B,EAAC,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,YAAY,CAAC,CAAC;YAE/F,IACE,CAAC,cAAc,IAAI,IAAI,IAAI,IAAA,0CAAuB,EAAC,iBAAiB,EAAE,uBAAuB,CAAC,CAAC;gBAC/F,cAAc,EACd,CAAC;gBACD,IAAM,iBAAiB,yBAClB,IAAA,2CAAwB,EAAC,iBAAiB,CAAC,KAC9C,gBAAgB,kBAAA,EAChB,cAAc,EAAE,IAAA,sBAAU,GAAE,GAC7B,CAAC;gBAEF,IAAI,gBAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;oBACxC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAC;wBACjB,IAAI,EAAE,qCAAc;qBACrB,CAAC,CAAC;gBACL,CAAC;gBAED,SAAS,CAAC,2BAA2B,EAAE,iBAAiB,EAAE,SAAS,EAAE;oBACnE,WAAW,aAAA;oBACX,oBAAoB,EAAE,WAAW,CAAC,UAAU,GAAG,iBAAiB,CAAC,SAAS;iBAC3E,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC;QACf,IAAI,EAAE,qCAAc;QACpB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { faro, genShortID } from '@grafana/faro-core';\nimport type { EventsAPI, Observable, PushEventOptions } from '@grafana/faro-core';\n\nimport { isUrlIgnored } from '../../utils/url';\n\nimport { RESOURCE_ENTRY } from './performanceConstants';\nimport { createFaroResourceTiming, getSpanContextFromServerTiming, includePerformanceEntry } from './performanceUtils';\nimport type { ResourceEntryMessage } from './types';\n\ntype SpanContext = PushEventOptions['spanContext'];\n\nconst DEFAULT_TRACK_RESOURCES = { initiatorType: ['xmlhttprequest', 'fetch'] };\n\nexport function observeResourceTimings(\n  faroNavigationId: string,\n  pushEvent: EventsAPI['pushEvent'],\n  observable: Observable<ResourceEntryMessage>\n) {\n  const trackResources = faro.config.trackResources;\n\n  const observer = new PerformanceObserver((observedEntries) => {\n    const entries = observedEntries.getEntries();\n\n    for (const resourceEntryRaw of entries) {\n      if (isUrlIgnored(resourceEntryRaw.name)) {\n        return;\n      }\n\n      const resourceEntryJson = resourceEntryRaw.toJSON();\n\n      let spanContext: SpanContext = getSpanContextFromServerTiming(resourceEntryJson?.serverTiming);\n\n      if (\n        (trackResources == null && includePerformanceEntry(resourceEntryJson, DEFAULT_TRACK_RESOURCES)) ||\n        trackResources\n      ) {\n        const faroResourceEntry = {\n          ...createFaroResourceTiming(resourceEntryJson),\n          faroNavigationId,\n          faroResourceId: genShortID(),\n        };\n\n        if (faro.config.trackUserActionsPreview) {\n          observable?.notify({\n            type: RESOURCE_ENTRY,\n          });\n        }\n\n        pushEvent('faro.performance.resource', faroResourceEntry, undefined, {\n          spanContext,\n          timestampOverwriteMs: performance.timeOrigin + resourceEntryJson.startTime,\n        });\n      }\n    }\n  });\n\n  observer.observe({\n    type: RESOURCE_ENTRY,\n    buffered: true,\n  });\n}\n"]}