{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/view/instrumentation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,gDAAqG;AAGrG,2CAA2C;AAC3C;IAAyC,uCAAmB;IAA5D;;QACW,UAAI,GAAG,4CAA4C,CAAC;QACpD,aAAO,GAAG,mBAAO,CAAC;;IA2B7B,CAAC;IArBS,kDAAoB,GAA5B,UAA6B,IAAU;;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,MAAK,MAAA,IAAI,CAAC,YAAY,0CAAE,IAAI,CAAA,EAAE,CAAC;YAClD,IAAI,CAAC,GAAG,CAAC,SAAS,CAChB,8BAAkB,EAClB;gBACE,QAAQ,EAAE,MAAA,MAAA,IAAI,CAAC,YAAY,0CAAE,IAAI,mCAAI,yBAAa;gBAClD,MAAM,EAAE,MAAA,IAAI,CAAC,IAAI,mCAAI,yBAAa;aACnC,EACD,SAAS,EACT,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;YAEF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,wCAAU,GAAV;QACE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;IACH,0BAAC;AAAD,CAAC,AA7BD,CAAyC,+BAAmB,GA6B3D;AA7BY,kDAAmB","sourcesContent":["import { BaseInstrumentation, EVENT_VIEW_CHANGED, unknownString, VERSION } from '@grafana/faro-core';\nimport type { Meta, MetaView } from '@grafana/faro-core';\n\n// all this does is send VIEW_CHANGED event\nexport class ViewInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-view';\n  readonly version = VERSION;\n\n  // previously notified view, to ensure we don't send view changed\n  // event twice for the same view\n  private notifiedView: MetaView | undefined;\n\n  private sendViewChangedEvent(meta: Meta): void {\n    const view = meta.view;\n\n    if (view && view.name !== this.notifiedView?.name) {\n      this.api.pushEvent(\n        EVENT_VIEW_CHANGED,\n        {\n          fromView: this.notifiedView?.name ?? unknownString,\n          toView: view.name ?? unknownString,\n        },\n        undefined,\n        { skipDedupe: true }\n      );\n\n      this.notifiedView = view;\n    }\n  }\n\n  initialize() {\n    this.metas.addListener(this.sendViewChangedEvent.bind(this));\n  }\n}\n"]}