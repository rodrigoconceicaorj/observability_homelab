{"version":3,"file":"webVitalsWithAttribution.js","sourceRoot":"","sources":["../../../../src/instrumentations/webVitals/webVitalsWithAttribution.ts"],"names":[],"mappings":"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","sourcesContent":["import { onCLS, onFCP, onFID, onINP, onLCP, onTTFB } from 'web-vitals/attribution';\nimport type { Metric } from 'web-vitals/attribution';\n\nimport { unknownString } from '@grafana/faro-core';\nimport type { Config, MeasurementEvent, MeasurementsAPI, PushMeasurementOptions } from '@grafana/faro-core';\n\nimport { getItem, webStorageType } from '../../utils';\nimport { NAVIGATION_ID_STORAGE_KEY } from '../instrumentationConstants';\n\ntype Values = MeasurementEvent['values'];\ntype Context = Required<PushMeasurementOptions>['context'];\n\n// duplicate keys saved in variables to save bundle size\n// refs: https://github.com/grafana/faro-web-sdk/pull/595#discussion_r1615833968\nconst loadStateKey = 'load_state';\nconst timeToFirstByteKey = 'time_to_first_byte';\n\nexport class WebVitalsWithAttribution {\n  constructor(\n    private corePushMeasurement: MeasurementsAPI['pushMeasurement'],\n    private webVitalConfig?: Config['webVitalsInstrumentation']\n  ) {}\n\n  initialize(): void {\n    this.measureCLS();\n    this.measureFCP();\n    this.measureFID();\n    this.measureINP();\n    this.measureLCP();\n    this.measureTTFB();\n  }\n\n  private measureCLS(): void {\n    onCLS(\n      (metric) => {\n        const { loadState, largestShiftValue, largestShiftTime, largestShiftTarget } = metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'largest_shift_value', largestShiftValue);\n        this.addIfPresent(values, 'largest_shift_time', largestShiftTime);\n\n        const context = this.buildInitialContext(metric);\n        this.addIfPresent(context, loadStateKey, loadState);\n        this.addIfPresent(context, 'largest_shift_target', largestShiftTarget);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private measureFCP(): void {\n    onFCP(\n      (metric) => {\n        const { firstByteToFCP, timeToFirstByte, loadState } = metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'first_byte_to_fcp', firstByteToFCP);\n        this.addIfPresent(values, timeToFirstByteKey, timeToFirstByte);\n\n        const context = this.buildInitialContext(metric);\n        this.addIfPresent(context, loadStateKey, loadState);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private measureFID(): void {\n    onFID(\n      (metric) => {\n        const { eventTime, eventTarget, eventType, loadState } = metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'event_time', eventTime);\n\n        const context = this.buildInitialContext(metric);\n        this.addIfPresent(context, 'event_target', eventTarget);\n        this.addIfPresent(context, 'event_type', eventType);\n        this.addIfPresent(context, loadStateKey, loadState);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private measureINP(): void {\n    onINP(\n      (metric) => {\n        const {\n          interactionTime,\n          presentationDelay,\n          inputDelay,\n          processingDuration,\n          nextPaintTime,\n          loadState,\n          interactionTarget,\n          interactionType,\n        } = metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'interaction_time', interactionTime);\n        this.addIfPresent(values, 'presentation_delay', presentationDelay);\n        this.addIfPresent(values, 'input_delay', inputDelay);\n        this.addIfPresent(values, 'processing_duration', processingDuration);\n        this.addIfPresent(values, 'next_paint_time', nextPaintTime);\n\n        const context = this.buildInitialContext(metric);\n        this.addIfPresent(context, loadStateKey, loadState);\n        this.addIfPresent(context, 'interaction_target', interactionTarget);\n        this.addIfPresent(context, 'interaction_type', interactionType);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private measureLCP(): void {\n    onLCP(\n      (metric) => {\n        const { elementRenderDelay, resourceLoadDelay, resourceLoadDuration, timeToFirstByte, element } =\n          metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'element_render_delay', elementRenderDelay);\n        this.addIfPresent(values, 'resource_load_delay', resourceLoadDelay);\n        this.addIfPresent(values, 'resource_load_duration', resourceLoadDuration);\n        this.addIfPresent(values, timeToFirstByteKey, timeToFirstByte);\n\n        const context = this.buildInitialContext(metric);\n        this.addIfPresent(context, 'element', element);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private measureTTFB(): void {\n    onTTFB(\n      (metric) => {\n        const { dnsDuration, connectionDuration, requestDuration, waitingDuration, cacheDuration } = metric.attribution;\n\n        const values = this.buildInitialValues(metric);\n        this.addIfPresent(values, 'dns_duration', dnsDuration);\n        this.addIfPresent(values, 'connection_duration', connectionDuration);\n        this.addIfPresent(values, 'request_duration', requestDuration);\n        this.addIfPresent(values, 'waiting_duration', waitingDuration);\n        this.addIfPresent(values, 'cache_duration', cacheDuration);\n\n        const context = this.buildInitialContext(metric);\n\n        this.pushMeasurement(values, context);\n      },\n      { reportAllChanges: this.webVitalConfig?.reportAllChanges }\n    );\n  }\n\n  private buildInitialValues(metric: Metric): Values {\n    const indicator = metric.name.toLowerCase();\n    return {\n      [indicator]: metric.value,\n      delta: metric.delta,\n    };\n  }\n\n  private buildInitialContext(metric: Metric): Context {\n    const navigationEntryId = getItem(NAVIGATION_ID_STORAGE_KEY, webStorageType.session) ?? unknownString;\n\n    return {\n      id: metric.id,\n      rating: metric.rating,\n      navigation_type: metric.navigationType,\n      navigation_entry_id: navigationEntryId,\n    };\n  }\n\n  private pushMeasurement(values: Values, context: Context): void {\n    const type = 'web-vitals';\n    this.corePushMeasurement({ type, values }, { context });\n  }\n\n  private addIfPresent(source: Values | Context, key: string, metric?: number | string): void {\n    if (metric) {\n      source[key] = metric;\n    }\n  }\n}\n"]}