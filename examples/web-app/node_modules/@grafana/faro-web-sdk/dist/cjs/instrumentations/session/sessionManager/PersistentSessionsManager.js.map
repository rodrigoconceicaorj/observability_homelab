{"version":3,"file":"PersistentSessionsManager.js","sourceRoot":"","sources":["../../../../../src/instrumentations/session/sessionManager/PersistentSessionsManager.ts"],"names":[],"mappings":";;;AAAA,gDAAiE;AAEjE,wCAA0C;AAC1C,wDAAyF;AAEzF,uDAAuE;AACvE,6DAA2F;AAG3F;IAIE;QAAA,iBAOC;QAoBD,kBAAa,GAAG,IAAA,gBAAQ,EAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,EAAE,uCAAoB,CAAC,CAAC;QA1B7E,IAAI,CAAC,iBAAiB,GAAG,IAAA,2CAAqB,EAAC;YAC7C,gBAAgB,EAAE,yBAAyB,CAAC,gBAAgB;YAC5D,gBAAgB,EAAE,yBAAyB,CAAC,gBAAgB;SAC7D,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEM,2CAAiB,GAAxB;QACE,IAAA,uBAAU,EAAC,8BAAW,EAAE,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;IACtE,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,OAAwB;QAC9C,IAAA,oBAAO,EAAC,8BAAW,EAAE,IAAA,iCAAqB,EAAC,OAAO,CAAC,EAAE,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;IACnG,CAAC;IAEM,0CAAgB,GAAvB;QACE,IAAM,aAAa,GAAG,IAAA,oBAAO,EAAC,8BAAW,EAAE,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;QAEvF,IAAI,aAAa,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAoB,CAAC;QACtD,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAIO,wCAAI,GAAZ;QAAA,iBAcC;QAbC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;YAC5C,IAAI,QAAQ,CAAC,eAAe,KAAK,SAAS,EAAE,CAAC;gBAC3C,KAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,iGAAiG;QACjG,gBAAI,CAAC,KAAK,CAAC,WAAW,CACpB,IAAA,iDAA2B,EAAC;YAC1B,gBAAgB,EAAE,yBAAyB,CAAC,gBAAgB;YAC5D,gBAAgB,EAAE,yBAAyB,CAAC,gBAAgB;SAC7D,CAAC,CACH,CAAC;IACJ,CAAC;IA9Cc,0CAAgB,GAAG,2BAAc,CAAC,KAAK,AAAvB,CAAwB;IA+CzD,gCAAC;CAAA,AAhDD,IAgDC;AAhDY,8DAAyB","sourcesContent":["import { faro, stringifyExternalJson } from '@grafana/faro-core';\n\nimport { throttle } from '../../../utils';\nimport { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';\n\nimport { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';\nimport { getSessionMetaUpdateHandler, getUserSessionUpdater } from './sessionManagerUtils';\nimport type { FaroUserSession } from './types';\n\nexport class PersistentSessionsManager {\n  private static storageTypeLocal = webStorageType.local;\n  private updateUserSession: ReturnType<typeof getUserSessionUpdater>;\n\n  constructor() {\n    this.updateUserSession = getUserSessionUpdater({\n      fetchUserSession: PersistentSessionsManager.fetchUserSession,\n      storeUserSession: PersistentSessionsManager.storeUserSession,\n    });\n\n    this.init();\n  }\n\n  static removeUserSession() {\n    removeItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n  }\n\n  static storeUserSession(session: FaroUserSession): void {\n    setItem(STORAGE_KEY, stringifyExternalJson(session), PersistentSessionsManager.storageTypeLocal);\n  }\n\n  static fetchUserSession(): FaroUserSession | null {\n    const storedSession = getItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n\n    if (storedSession) {\n      return JSON.parse(storedSession) as FaroUserSession;\n    }\n\n    return null;\n  }\n\n  updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);\n\n  private init(): void {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        this.updateSession();\n      }\n    });\n\n    // Users can call the setSession() method, so we need to sync this with the local storage session\n    faro.metas.addListener(\n      getSessionMetaUpdateHandler({\n        fetchUserSession: PersistentSessionsManager.fetchUserSession,\n        storeUserSession: PersistentSessionsManager.storeUserSession,\n      })\n    );\n  }\n}\n"]}