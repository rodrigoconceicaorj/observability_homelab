{"version":3,"file":"instrumentation.js","sourceRoot":"","sources":["../../../../src/instrumentations/session/instrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseInstrumentation,\n  dateNow,\n  EVENT_SESSION_EXTEND,\n  EVENT_SESSION_RESUME,\n  EVENT_SESSION_START,\n  VERSION,\n} from '@grafana/faro-core';\nimport type { Config, Meta, MetaSession } from '@grafana/faro-core';\n\nimport type { TransportItem } from '../..';\nimport { createSession } from '../../metas';\n\nimport { type FaroUserSession, getSessionManagerByConfig, isSampled } from './sessionManager';\nimport { PersistentSessionsManager } from './sessionManager/PersistentSessionsManager';\nimport { createUserSessionObject, isUserSessionValid } from './sessionManager/sessionManagerUtils';\nimport type { SessionManager } from './sessionManager/types';\n\ntype LifecycleType = typeof EVENT_SESSION_RESUME | typeof EVENT_SESSION_START;\n\nexport class SessionInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-session';\n  readonly version = VERSION;\n\n  // previously notified session, to ensure we don't send session start\n  // event twice for the same session\n  private notifiedSession: MetaSession | undefined;\n\n  private sendSessionStartEvent(meta: Meta): void {\n    const session = meta.session;\n\n    if (session && session.id !== this.notifiedSession?.id) {\n      if (this.notifiedSession && this.notifiedSession.id === session.attributes?.['previousSession']) {\n        this.api.pushEvent(EVENT_SESSION_EXTEND, {}, undefined, { skipDedupe: true });\n        this.notifiedSession = session;\n        return;\n      }\n\n      this.notifiedSession = session;\n      // no need to add attributes and session id, they are included as part of meta\n      // automatically\n      this.api.pushEvent(EVENT_SESSION_START, {}, undefined, { skipDedupe: true });\n    }\n  }\n\n  private createInitialSession(\n    SessionManager: SessionManager,\n    sessionsConfig: Required<Config>['sessionTracking']\n  ): {\n    initialSession: FaroUserSession;\n    lifecycleType: LifecycleType;\n  } {\n    let storedUserSession: FaroUserSession | null = SessionManager.fetchUserSession();\n\n    if (sessionsConfig.persistent && sessionsConfig.maxSessionPersistenceTime && storedUserSession) {\n      const now = dateNow();\n      const shouldClearPersistentSession =\n        storedUserSession.lastActivity < now - sessionsConfig.maxSessionPersistenceTime;\n\n      if (shouldClearPersistentSession) {\n        PersistentSessionsManager.removeUserSession();\n        storedUserSession = null;\n      }\n    }\n\n    let lifecycleType: LifecycleType;\n    let initialSession: FaroUserSession;\n\n    if (isUserSessionValid(storedUserSession)) {\n      const sessionId = storedUserSession?.sessionId;\n\n      initialSession = createUserSessionObject({\n        sessionId,\n        isSampled: storedUserSession!.isSampled || false,\n        started: storedUserSession?.started,\n      });\n\n      const storedUserSessionMeta = storedUserSession?.sessionMeta;\n\n      // For resumed sessions we want to merge the previous overrides with the configured ones.\n      // If the same key is present in both, the new one will override the old one.\n      const overrides = { ...sessionsConfig.session?.overrides, ...storedUserSessionMeta?.overrides };\n\n      initialSession.sessionMeta = {\n        ...sessionsConfig.session,\n        id: sessionId,\n        attributes: {\n          ...sessionsConfig.session?.attributes,\n          ...storedUserSessionMeta?.attributes,\n          // For valid resumed sessions we do not want to recalculate the sampling decision on each init phase.\n          isSampled: initialSession.isSampled.toString(),\n        },\n        overrides,\n      };\n\n      lifecycleType = EVENT_SESSION_RESUME;\n    } else {\n      const sessionId = sessionsConfig.session?.id ?? createSession().id;\n\n      initialSession = createUserSessionObject({\n        sessionId,\n        isSampled: isSampled(),\n      });\n\n      const overrides = sessionsConfig.session?.overrides;\n\n      initialSession.sessionMeta = {\n        id: sessionId,\n        attributes: {\n          isSampled: initialSession.isSampled.toString(),\n          ...sessionsConfig.session?.attributes,\n        },\n        // new session we don't care about previous overrides\n        ...(overrides ? { overrides } : {}),\n      };\n\n      lifecycleType = EVENT_SESSION_START;\n    }\n\n    return { initialSession, lifecycleType };\n  }\n\n  private registerBeforeSendHook(SessionManager: SessionManager) {\n    const { updateSession } = new SessionManager();\n\n    this.transports?.addBeforeSendHooks((item) => {\n      updateSession();\n\n      const attributes = item.meta.session?.attributes;\n\n      if (attributes && attributes?.['isSampled'] === 'true') {\n        let newItem: TransportItem = JSON.parse(JSON.stringify(item));\n\n        const newAttributes = newItem.meta.session?.attributes;\n        delete newAttributes?.['isSampled'];\n\n        if (Object.keys(newAttributes ?? {}).length === 0) {\n          delete newItem.meta.session?.attributes;\n        }\n\n        return newItem;\n      }\n\n      return null;\n    });\n  }\n\n  initialize() {\n    this.logDebug('init session instrumentation');\n\n    const sessionTrackingConfig = this.config.sessionTracking;\n\n    if (sessionTrackingConfig?.enabled) {\n      const SessionManager = getSessionManagerByConfig(sessionTrackingConfig);\n\n      this.registerBeforeSendHook(SessionManager);\n\n      const { initialSession, lifecycleType } = this.createInitialSession(SessionManager, sessionTrackingConfig);\n\n      SessionManager.storeUserSession(initialSession);\n\n      const initialSessionMeta = initialSession.sessionMeta;\n\n      this.notifiedSession = initialSessionMeta;\n      this.api.setSession(initialSessionMeta);\n\n      if (lifecycleType === EVENT_SESSION_START) {\n        this.api.pushEvent(EVENT_SESSION_START, {}, undefined, { skipDedupe: true });\n      }\n\n      if (lifecycleType === EVENT_SESSION_RESUME) {\n        this.api.pushEvent(EVENT_SESSION_RESUME, {}, undefined, { skipDedupe: true });\n      }\n    }\n\n    this.metas.addListener(this.sendSessionStartEvent.bind(this));\n  }\n}\n"]}