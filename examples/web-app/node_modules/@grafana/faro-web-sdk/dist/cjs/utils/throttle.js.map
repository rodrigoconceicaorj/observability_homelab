{"version":3,"file":"throttle.js","sourceRoot":"","sources":["../../../src/utils/throttle.ts"],"names":[],"mappings":";;AAGA,4BAyBC;AA5BD;;GAEG;AACH,SAAgB,QAAQ,CAAqC,QAAW,EAAE,KAAa;IACrF,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,IAAI,WAAiC,CAAC;IAEtC,IAAM,eAAe,GAAG;QACtB,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;YACxB,KAAK,GAAG,KAAK,CAAC;YACd,OAAO;QACT,CAAC;QAED,QAAQ,eAAI,WAAW,EAAE;QACzB,WAAW,GAAG,IAAI,CAAC;QACnB,UAAU,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO;QAAC,cAAsB;aAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;YAAtB,yBAAsB;;QAC5B,IAAI,KAAK,EAAE,CAAC;YACV,WAAW,GAAG,IAAI,CAAC;YACnB,OAAO;QACT,CAAC;QAED,QAAQ,eAAI,IAAI,EAAE;QAClB,KAAK,GAAG,IAAI,CAAC;QACb,UAAU,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Tail based throttle which caches the args of the last call and updates\n */\nexport function throttle<T extends (...args: any[]) => void>(callback: T, delay: number) {\n  let pause = false;\n  let lastPending: Parameters<T> | null;\n\n  const timeoutBehavior = () => {\n    if (lastPending == null) {\n      pause = false;\n      return;\n    }\n\n    callback(...lastPending);\n    lastPending = null;\n    setTimeout(timeoutBehavior, delay);\n  };\n\n  return (...args: Parameters<T>) => {\n    if (pause) {\n      lastPending = args;\n      return;\n    }\n\n    callback(...args);\n    pause = true;\n    setTimeout(timeoutBehavior, delay);\n  };\n}\n"]}