{"version":3,"file":"meta.js","sourceRoot":"","sources":["../../../../src/metas/browser/meta.ts"],"names":[],"mappings":";;;AAAA,6CAAwC;AAExC,gDAAmD;AAG5C,IAAM,WAAW,GAAoC;IAC1D,IAAM,MAAM,GAAG,IAAI,uBAAQ,EAAE,CAAC;IACxB,IAAA,KAAoB,MAAM,CAAC,UAAU,EAAE,EAArC,IAAI,UAAA,EAAE,OAAO,aAAwB,CAAC;IACxC,IAAA,KAAuC,MAAM,CAAC,KAAK,EAAE,EAA7C,MAAM,UAAA,EAAW,SAAS,aAAmB,CAAC;IAC5D,IAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IACjC,IAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;IACpC,IAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpD,IAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,OAAO;QACL,OAAO,EAAE;YACP,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,yBAAa;YAC3B,OAAO,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,yBAAa;YACjC,EAAE,EAAE,UAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,yBAAa,cAAI,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,yBAAa,CAAE;YAC9D,SAAS,EAAE,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,yBAAa;YACrC,QAAQ,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,yBAAa;YACnC,MAAM,QAAA;YACN,MAAM,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,yBAAa;YAC/B,aAAa,EAAE,UAAG,MAAM,CAAC,UAAU,CAAE;YACrC,cAAc,EAAE,UAAG,MAAM,CAAC,WAAW,CAAE;SACxC;KACF,CAAC;IAEF,SAAS,SAAS;QAChB,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACtB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,IAAI,eAAe,IAAI,SAAS,IAAI,SAAS,CAAC,aAAa,EAAE,CAAC;YAC5D,iHAAiH;YACjH,OAAQ,SAAiB,CAAC,aAAa,CAAC,MAAM,CAAC;QACjD,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC,CAAC;AAnCW,QAAA,WAAW,eAmCtB","sourcesContent":["import { UAParser } from 'ua-parser-js';\n\nimport { unknownString } from '@grafana/faro-core';\nimport type { Meta, MetaBrowser, MetaItem } from '@grafana/faro-core';\n\nexport const browserMeta: MetaItem<Pick<Meta, 'browser'>> = () => {\n  const parser = new UAParser();\n  const { name, version } = parser.getBrowser();\n  const { name: osName, version: osVersion } = parser.getOS();\n  const userAgent = parser.getUA();\n  const language = navigator.language;\n  const mobile = navigator.userAgent.includes('Mobi');\n  const brands = getBrands();\n\n  return {\n    browser: {\n      name: name ?? unknownString,\n      version: version ?? unknownString,\n      os: `${osName ?? unknownString} ${osVersion ?? unknownString}`,\n      userAgent: userAgent ?? unknownString,\n      language: language ?? unknownString,\n      mobile,\n      brands: brands ?? unknownString,\n      viewportWidth: `${window.innerWidth}`,\n      viewportHeight: `${window.innerHeight}`,\n    },\n  };\n\n  function getBrands(): MetaBrowser['brands'] | undefined {\n    if (!name || !version) {\n      return undefined;\n    }\n\n    if ('userAgentData' in navigator && navigator.userAgentData) {\n      // userAgentData in experimental (only Chrome supports it) thus TS does not ship the respective type declarations\n      return (navigator as any).userAgentData.brands;\n    }\n\n    return undefined;\n  }\n};\n"]}