{"version":3,"file":"transport.js","sourceRoot":"","sources":["../../../../src/transports/fetch/transport.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseExtension, BaseTransport, createPromiseBuffer, getTransportBody, noop, VERSION } from '@grafana/faro-core';\nimport type { Config, Patterns, PromiseBuffer, TransportItem } from '@grafana/faro-core';\n\nimport { getSessionManagerByConfig } from '../../instrumentations/session/sessionManager';\nimport { getUserSessionUpdater } from '../../instrumentations/session/sessionManager/sessionManagerUtils';\n\nimport type { FetchTransportOptions } from './types';\n\nconst DEFAULT_BUFFER_SIZE = 30;\nconst DEFAULT_CONCURRENCY = 5; // chrome supports 10 total, firefox 17\nconst DEFAULT_RATE_LIMIT_BACKOFF_MS = 5000;\n\nconst BEACON_BODY_SIZE_LIMIT = 60000;\nconst TOO_MANY_REQUESTS = 429;\nconst ACCEPTED = 202;\n\nexport class FetchTransport extends BaseTransport {\n  readonly name = '@grafana/faro-web-sdk:transport-fetch';\n  readonly version = VERSION;\n\n  promiseBuffer: PromiseBuffer<Response | void>;\n\n  private readonly rateLimitBackoffMs: number;\n  private readonly getNow: () => number;\n  private disabledUntil: Date = new Date();\n\n  constructor(private options: FetchTransportOptions) {\n    super();\n\n    this.rateLimitBackoffMs = options.defaultRateLimitBackoffMs ?? DEFAULT_RATE_LIMIT_BACKOFF_MS;\n    this.getNow = options.getNow ?? (() => Date.now());\n\n    this.promiseBuffer = createPromiseBuffer({\n      size: options.bufferSize ?? DEFAULT_BUFFER_SIZE,\n      concurrency: options.concurrency ?? DEFAULT_CONCURRENCY,\n    });\n  }\n\n  async send(items: TransportItem[]): Promise<void> {\n    try {\n      if (this.disabledUntil > new Date(this.getNow())) {\n        this.logWarn(`Dropping transport item due to too many requests. Backoff until ${this.disabledUntil}`);\n\n        return Promise.resolve();\n      }\n\n      await this.promiseBuffer.add(() => {\n        const body = JSON.stringify(getTransportBody(items));\n\n        const { url, requestOptions, apiKey } = this.options;\n\n        const { headers, ...restOfRequestOptions } = requestOptions ?? {};\n\n        let sessionId;\n        const sessionMeta = this.metas.value.session;\n        if (sessionMeta != null) {\n          sessionId = sessionMeta.id;\n        }\n\n        return fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(headers ?? {}),\n            ...(apiKey ? { 'x-api-key': apiKey } : {}),\n            ...(sessionId ? { 'x-faro-session-id': sessionId } : {}),\n          },\n          body,\n          keepalive: body.length <= BEACON_BODY_SIZE_LIMIT,\n          ...(restOfRequestOptions ?? {}),\n        })\n          .then(async (response) => {\n            if (response.status === ACCEPTED) {\n              const sessionExpired = response.headers.get('X-Faro-Session-Status') === 'invalid';\n\n              if (sessionExpired) {\n                this.extendFaroSession(this.config, this.logDebug);\n              }\n            }\n\n            if (response.status === TOO_MANY_REQUESTS) {\n              this.disabledUntil = this.getRetryAfterDate(response);\n              this.logWarn(`Too many requests, backing off until ${this.disabledUntil}`);\n            }\n\n            // read the body so the connection can be closed\n            response.text().catch(noop);\n            return response;\n          })\n          .catch((err) => {\n            this.logError('Failed sending payload to the receiver\\n', JSON.parse(body), err);\n          });\n      });\n    } catch (err) {\n      this.logError(err);\n    }\n  }\n\n  override getIgnoreUrls(): Patterns {\n    return ([this.options.url] as Patterns).concat(this.config.ignoreUrls ?? []);\n  }\n\n  override isBatched(): boolean {\n    return true;\n  }\n\n  private getRetryAfterDate(response: Response): Date {\n    const now = this.getNow();\n    const retryAfterHeader = response.headers.get('Retry-After');\n\n    if (retryAfterHeader) {\n      const delay = Number(retryAfterHeader);\n\n      if (!isNaN(delay)) {\n        return new Date(delay * 1000 + now);\n      }\n\n      const date = Date.parse(retryAfterHeader);\n\n      if (!isNaN(date)) {\n        return new Date(date);\n      }\n    }\n\n    return new Date(now + this.rateLimitBackoffMs);\n  }\n\n  private extendFaroSession(config: Config, logDebug: BaseExtension['logDebug']) {\n    const SessionExpiredString = `Session expired`;\n\n    const sessionTrackingConfig = config.sessionTracking;\n\n    if (sessionTrackingConfig?.enabled) {\n      const { fetchUserSession, storeUserSession } = getSessionManagerByConfig(sessionTrackingConfig);\n\n      getUserSessionUpdater({ fetchUserSession, storeUserSession })({ forceSessionExtend: true });\n\n      logDebug(`${SessionExpiredString} created new session.`);\n    } else {\n      logDebug(`${SessionExpiredString}.`);\n    }\n  }\n}\n"]}