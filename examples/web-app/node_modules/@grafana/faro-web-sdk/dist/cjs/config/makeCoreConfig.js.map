{"version":3,"file":"makeCoreConfig.js","sourceRoot":"","sources":["../../../src/config/makeCoreConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createInternalLogger,\n  defaultBatchingConfig,\n  defaultGlobalObjectKey,\n  defaultInternalLoggerLevel,\n  defaultLogArgsSerializer,\n  defaultUnpatchedConsole,\n  isBoolean,\n  isEmpty,\n  isObject,\n} from '@grafana/faro-core';\nimport type { Config, Instrumentation, MetaItem, MetaSession, Transport } from '@grafana/faro-core';\n\nimport { defaultEventDomain } from '../consts';\nimport { parseStacktrace } from '../instrumentations';\nimport { defaultSessionTrackingConfig } from '../instrumentations/session';\nimport { userActionDataAttribute } from '../instrumentations/userActions/const';\nimport { browserMeta } from '../metas';\nimport { k6Meta } from '../metas/k6';\nimport { createPageMeta } from '../metas/page';\nimport { FetchTransport } from '../transports';\n\nimport { getWebInstrumentations } from './getWebInstrumentations';\nimport type { BrowserConfig } from './types';\n\nexport function makeCoreConfig(browserConfig: BrowserConfig): Config {\n  const transports: Transport[] = [];\n\n  const internalLogger = createInternalLogger(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);\n\n  if (browserConfig.transports) {\n    if (browserConfig.url || browserConfig.apiKey) {\n      internalLogger.error('if \"transports\" is defined, \"url\" and \"apiKey\" should not be defined');\n    }\n\n    transports.push(...browserConfig.transports);\n  } else if (browserConfig.url) {\n    transports.push(\n      new FetchTransport({\n        url: browserConfig.url,\n        apiKey: browserConfig.apiKey,\n      })\n    );\n  } else {\n    internalLogger.error('either \"url\" or \"transports\" must be defined');\n  }\n\n  const {\n    // properties with default values\n    dedupe = true,\n    eventDomain = defaultEventDomain,\n    globalObjectKey = defaultGlobalObjectKey,\n    instrumentations = getWebInstrumentations(),\n    internalLoggerLevel = defaultInternalLoggerLevel,\n    isolate = false,\n    logArgsSerializer = defaultLogArgsSerializer,\n    metas = createDefaultMetas(browserConfig),\n    paused = false,\n    preventGlobalExposure = false,\n    unpatchedConsole = defaultUnpatchedConsole,\n    trackUserActionsPreview = false,\n    trackUserActionsDataAttributeName = userActionDataAttribute,\n    url: browserConfigUrl,\n    // Properties without default values or which aren't used to create derived config\n    ...restProperties\n  }: BrowserConfig = browserConfig;\n\n  return {\n    ...restProperties,\n\n    batching: {\n      ...defaultBatchingConfig,\n      ...browserConfig.batching,\n    },\n    dedupe: dedupe,\n    globalObjectKey,\n    instrumentations: getFilteredInstrumentations(instrumentations, browserConfig),\n    internalLoggerLevel,\n    isolate,\n    logArgsSerializer,\n    metas,\n    parseStacktrace,\n    paused,\n    preventGlobalExposure,\n    transports,\n    unpatchedConsole,\n    eventDomain,\n    ignoreUrls: [\n      ...(browserConfig.ignoreUrls ?? []),\n      // ignore configured cloud collector url by default\n      ...(browserConfigUrl ? [browserConfigUrl] : []),\n      // Try our best to exclude collector URLs form other Faro instances. By default these are URLs ending with /collect or /collect/ followed by alphanumeric characters.\n      /\\/collect(?:\\/[\\w]*)?$/,\n    ],\n    sessionTracking: {\n      ...defaultSessionTrackingConfig,\n      ...browserConfig.sessionTracking,\n      ...crateSessionMeta({\n        trackGeolocation: browserConfig.trackGeolocation,\n        sessionTracking: browserConfig.sessionTracking,\n      }),\n    },\n    trackUserActionsPreview,\n    trackUserActionsDataAttributeName,\n  };\n}\n\nfunction getFilteredInstrumentations(\n  instrumentations: Instrumentation[],\n  { trackUserActionsPreview }: BrowserConfig\n): Instrumentation[] {\n  return instrumentations.filter((instr) => {\n    if (instr.name === '@grafana/faro-web-sdk:instrumentation-user-action' && !trackUserActionsPreview) {\n      return false;\n    }\n    return true;\n  });\n}\n\nfunction createDefaultMetas(browserConfig: BrowserConfig): MetaItem[] {\n  const { page, generatePageId } = browserConfig?.pageTracking ?? {};\n\n  const initialMetas: MetaItem[] = [\n    browserMeta,\n    createPageMeta({ generatePageId, initialPageMeta: page }),\n    ...(browserConfig.metas ?? []),\n  ];\n\n  const isK6BrowserSession = isObject((window as any).k6);\n  if (isK6BrowserSession) {\n    return [...initialMetas, k6Meta];\n  }\n\n  return initialMetas;\n}\n\nfunction crateSessionMeta({\n  trackGeolocation,\n  sessionTracking,\n}: Pick<BrowserConfig, 'trackGeolocation' | 'sessionTracking'>): { session: MetaSession } | {} {\n  const overrides: MetaSession['overrides'] = {};\n\n  if (isBoolean(trackGeolocation)) {\n    overrides.geoLocationTrackingEnabled = trackGeolocation;\n  }\n\n  if (isEmpty(overrides)) {\n    return {};\n  }\n\n  return {\n    session: {\n      ...(sessionTracking?.session ?? {}),\n      overrides,\n    },\n  };\n}\n"]}